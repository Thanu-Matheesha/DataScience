power3 <- cbind(temp[,c(1:3)], dis_time_tour2[,c("Time2", "end")])
View(power3)
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
View(power3)
# power <- temp
# colnames(power)[2] <- c("Latitude")
# colnames(power)[3] <- c("Longitude")
# power$start <- seq.Date(as.Date("2015-01-01"), by = "day", length.out = nrow(power))
# date <- max(power$start)
# power$end <- seq.Date(as.Date(date), by = "day", along.with = nrow(power))
power_geo <- geojsonio::geojson_json(power3,lat="Latitude",lon="Longitude")
leaflet(power_geo) %>%
addProviderTiles("OpenStreetMap.Mapnik")%>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Location,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$`Quantity(CBM)`, "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
icon = makeIcon("DC.png",20,20),
popup = paste("DC"))%>%
addTimeline(
sliderOpts = sliderOptions(
formatOutput = htmlwidgets::JS(
"function(date) {return new Date(date).toTimeString()}"
),
position = "bottomright",
step = 500,
duration = 200,
showTicks = FALSE
)
)
kml.coordinates <- read.csv("kml.coordinates.csv")
leaflet(power_geo) %>%
addProviderTiles("OpenStreetMap.Mapnik")%>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Location,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$`Quantity(CBM)`, "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
icon = makeIcon("DC.png",20,20),
popup = paste("DC"))%>%
addTimeline(
sliderOpts = sliderOptions(
formatOutput = htmlwidgets::JS(
"function(date) {return new Date(date).toTimeString()}"
),
position = "bottomright",
step = 500,
duration = 200,
showTicks = FALSE
)
)
power3$start <- as.datetime(power3$start)
power3$end <- as.datetime(power3$end)
# power <- temp
# colnames(power)[2] <- c("Latitude")
# colnames(power)[3] <- c("Longitude")
# power$start <- seq.Date(as.Date("2015-01-01"), by = "day", length.out = nrow(power))
# date <- max(power$start)
# power$end <- seq.Date(as.Date(date), by = "day", along.with = nrow(power))
power_geo <- geojsonio::geojson_json(power3,lat="Latitude",lon="Longitude")
leaflet(power_geo) %>%
addProviderTiles("OpenStreetMap.Mapnik")%>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Location,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$`Quantity(CBM)`, "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
icon = makeIcon("DC.png",20,20),
popup = paste("DC"))%>%
addTimeline(
sliderOpts = sliderOptions(
formatOutput = htmlwidgets::JS(
"function(date) {return new Date(date).toTimeString()}"
),
position = "bottomright",
step = 500,
duration = 200,
showTicks = FALSE
)
)
?as.datetime
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
dis_time_tour2$Time <- dis_time_tour2$Time/60
dis_time_tour2$tcumsum <- cumsum(dis_time_tour2$Time)
dis_time_tour2$Time2 <- substr(times((dis_time_tour2$tcumsum%/%60 +  dis_time_tour2$tcumsum%%60 /60)/24), 1, 5)
dis_time_tour2$Time2 <- as.POSIXct(dis_time_tour2$Time2,format="%H:%M")
dis_time_tour2$end <- max(dis_time_tour2$Time2)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("Time2", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
kml.coordinates <- read.csv("kml.coordinates.csv")
dis_time_tour2 <- read.csv("Time_tour.csv")
temp1 <- read_csv("time_map2.csv")
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
dis_time_tour2$Time <- dis_time_tour2$Time/60
dis_time_tour2$tcumsum <- cumsum(dis_time_tour2$Time)
dis_time_tour2$Time2 <- substr(times((dis_time_tour2$tcumsum%/%60 +  dis_time_tour2$tcumsum%%60 /60)/24), 1, 5)
dis_time_tour2$Time2 <- as.POSIXct(dis_time_tour2$Time2,format="%H:%M")
dis_time_tour2$end <- max(dis_time_tour2$Time2)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("Time2", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
View(power3)
power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime(power3$start)
View(power3)
Sys.Date()
Sys.time()
Sys.timezone()
View(dis_time_tour2)
dis_time_tour2$nn <- sum(Sys.time()+dis_time_tour2$Time2)
dis_time_tour2$nn <- sum(Sys.time(),dis_time_tour2$Time2)
dis_time_tour2$nn <- Sys.time()+dis_time_tour2$Time2
dis_time_tour2$nn <- Sys.time()+dis_time_tour2$tcumsum
dis_time_tour2$nn <- Sys.time()+minutes(dis_time_tour2$tcumsum)
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
dis_time_tour2$Time <- dis_time_tour2$Time/60
kml.coordinates <- read.csv("kml.coordinates.csv")
dis_time_tour2 <- read.csv("Time_tour.csv")
temp1 <- read_csv("time_map2.csv")
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
dis_time_tour2$Time <- dis_time_tour2$Time/60
dis_time_tour2$tcumsum <- cumsum(dis_time_tour2$Time)
dis_time_tour2$Time2 <- substr(times((dis_time_tour2$tcumsum%/%60 +  dis_time_tour2$tcumsum%%60 /60)/24), 1, 5)
View(dis_time_tour2)
dis_time_tour2$Time2 <- as.time(dis_time_tour2$Time2,format="%H:%M")
dis_time_tour2$end <- max(dis_time_tour2$Time2)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("Time2", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
# power <- temp
# colnames(power)[2] <- c("Latitude")
# colnames(power)[3] <- c("Longitude")
# power$start <- seq.Date(as.Date("2015-01-01"), by = "day", length.out = nrow(power))
# date <- max(power$start)
# power$end <- seq.Date(as.Date(date), by = "day", along.with = nrow(power))
power_geo <- geojsonio::geojson_json(power3,lat="Latitude",lon="Longitude")
leaflet(power_geo) %>%
addProviderTiles("OpenStreetMap.Mapnik")%>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Location,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$`Quantity(CBM)`, "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
icon = makeIcon("DC.png",20,20),
popup = paste("DC"))%>%
addTimeline(
sliderOpts = sliderOptions(
formatOutput = htmlwidgets::JS(
"function(date) {return new Date(date).toTimeString()}"
),
position = "bottomright",
step = 500,
duration = 200,
showTicks = FALSE
)
)
dis_time_tour2$start <- Sys.time() + dis_time_tour2$Time2
View(dis_time_tour2)
kml.coordinates <- read.csv("kml.coordinates.csv")
dis_time_tour2 <- read.csv("Time_tour.csv")
temp1 <- read_csv("time_map2.csv")
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
dis_time_tour2$Time <- dis_time_tour2$Time/60
dis_time_tour2$tcumsum <- cumsum(dis_time_tour2$Time)
dis_time_tour2$Time2 <- substr(times((dis_time_tour2$tcumsum%/%60 +  dis_time_tour2$tcumsum%%60 /60)/24), 1, 5)
dis_time_tour2$Time2 <- as.time(dis_time_tour2$Time2,format="%H:%M")
dis_time_tour2$Time2 <- as.POSIXct(dis_time_tour2$Time2,format="%H:%M")
dis_time_tour2$Time2 <- as.time(dis_time_tour2$Time2)
dis_time_tour2$Time2 <- as.POSIXct(dis_time_tour2$Time2,format="%H:%M")
dis_time_tour2$Time2 <- as.POSIXct(dis_time_tour2$Time2,format="%H:%M",origin = "1960-10-01")
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
kml.coordinates <- read.csv("kml.coordinates.csv")
dis_time_tour2 <- read.csv("Time_tour.csv")
temp1 <- read_csv("time_map2.csv")
dis_time_tour2$Time <- dis_time_tour2$Time/60
dis_time_tour2$tcumsum <- cumsum(dis_time_tour2$Time)
dis_time_tour2$Time2 <- substr(times((dis_time_tour2$tcumsum%/%60 +  dis_time_tour2$tcumsum%%60 /60)/24), 1, 5)
dis_time_tour2$Time2 <- as.time(dis_time_tour2$Time2)
dis_time_tour2$system <- Sys.time()
View(dis_time_tour2)
dis_time_tour2$system <- as.datetime(dis_time_tour2$system)
View(dis_time_tour2)
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
kml.coordinates <- read.csv("kml.coordinates.csv")
dis_time_tour2 <- read.csv("Time_tour.csv")
temp1 <- read_csv("time_map2.csv")
dis_time_tour2$Time <- dis_time_tour2$Time/60
dis_time_tour2$tcumsum <- cumsum(dis_time_tour2$Time)
dis_time_tour2$Time2 <- substr(times((dis_time_tour2$tcumsum%/%60 +  dis_time_tour2$tcumsum%%60 /60)/24), 1, 5)
dis_time_tour2$system <- Sys.time()
dis_time_tour2$system <- as.datetime(dis_time_tour2$system)
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
kml.coordinates <- read.csv("kml.coordinates.csv")
dis_time_tour2 <- read.csv("Time_tour.csv")
temp1 <- read_csv("time_map2.csv")
dis_time_tour2$Time <- dis_time_tour2$Time/60
dis_time_tour2$tcumsum <- cumsum(dis_time_tour2$Time)
dis_time_tour2$Time2 <- substr(times((dis_time_tour2$tcumsum%/%60 +  dis_time_tour2$tcumsum%%60 /60)/24), 1, 5)
# dis_time_tour2$Time2 <- as.time(dis_time_tour2$Time2)
dis_time_tour2$system <- Sys.time()
# dis_time_tour2$system <- as.datetime(dis_time_tour2$system)
dis_time_tour2$Time2 <- as.POSIXct(dis_time_tour2$Time2,format="%H:%M")
dis_time_tour2$start <- dis_time_tour2$system + dis_time_tour2$Time2
dis_time_tour2$start <- dis_time_tour2$system + dis_time_tour2$Time2*60*60
dis_time_tour2$start <- dis_time_tour2$system + hours(dis_time_tour2$Time2)
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
kml.coordinates <- read.csv("kml.coordinates.csv")
dis_time_tour2 <- read.csv("Time_tour.csv")
temp1 <- read_csv("time_map2.csv")
dis_time_tour2$Time <- dis_time_tour2$Time/60
dis_time_tour2$tcumsum <- cumsum(dis_time_tour2$Time)
dis_time_tour2$Time2 <- substr(times((dis_time_tour2$tcumsum%/%60 +  dis_time_tour2$tcumsum%%60 /60)/24), 1, 5)
# dis_time_tour2$Time2 <- as.time(dis_time_tour2$Time2)
dis_time_tour2$system <- Sys.time()
dis_time_tour2$start <- dis_time_tour2$system + hours(dis_time_tour2$tcumsum)
dis_time_tour2$start <- dis_time_tour2$system + hours(as.integer(dis_time_tour2$tcumsum))
#                            simplify = TRUE)
#
#   pl <- decode_pl(foo$routes$overview_polyline$points)
#
#   return(pl)
#
# }
# ) %>%
#   bind_rows(.id = "Point") -> temp
###########
kml.coordinates <- read.csv("kml.coordinates.csv")
temp1 <- read_csv("time_map2.csv")
dis_time_tour2 <- read.csv("Time_tour.csv")
dis_time_tour2$Time <- dis_time_tour2$Time/60
dis_time_tour2$tcumsum <- cumsum(dis_time_tour2$Time)
dis_time_tour2$Time2 <- substr(times((dis_time_tour2$tcumsum%/%60 +  dis_time_tour2$tcumsum%%60 /60)/24), 1, 5)
# dis_time_tour2$Time2 <- as.time(dis_time_tour2$Time2)
dis_time_tour2$system <- Sys.time()
# dis_time_tour2$system <- as.datetime(dis_time_tour2$system)
dis_time_tour2$Time2 <- as.POSIXct(dis_time_tour2$Time2,format="%H:%M")
dis_time_tour2$start <- dis_time_tour2$system + minutes(as.integer(dis_time_tour2$tcumsum))
power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
dis_time_tour2$end <- max(dis_time_tour2$start)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
View(power3)
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime(power3$start)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
# power <- temp
# colnames(power)[2] <- c("Latitude")
# colnames(power)[3] <- c("Longitude")
# power$start <- seq.Date(as.Date("2015-01-01"), by = "day", length.out = nrow(power))
# date <- max(power$start)
# power$end <- seq.Date(as.Date(date), by = "day", along.with = nrow(power))
power_geo <- geojsonio::geojson_json(power3,lat="Latitude",lon="Longitude")
leaflet(power_geo) %>%
addProviderTiles("OpenStreetMap.Mapnik")%>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Location,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$`Quantity(CBM)`, "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
icon = makeIcon("DC.png",20,20),
popup = paste("DC"))%>%
addTimeline(
sliderOpts = sliderOptions(
formatOutput = htmlwidgets::JS(
"function(date) {return new Date(date).toTimeString()}"
),
position = "bottomright",
step = 500,
duration = 200,
showTicks = FALSE
)
)
power3$start <- as.time (power3$start)
power3$start <- as.time(power3$start)
power3$start <- as.time(power3$start)
power3$start <- as.datetime.chron(power3$start)
View(power3)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime.POSIXct(power3$start)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime(power3$start, tz = "GMT")
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime(power3$start, tz=Sys.timezone())
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
View(power3)
View(power3)
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- ymd_hms(power3$start)
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime.datetime(power3$start)
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime.datetime(power3$start)
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime(power3$start)
power3$end <- as.datetime(power3$end)
power3$end <- as.datetime.datetime(power3$end)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime.datetime(power3$start)
power3$end <- as.datetime.datetime(power3$end)
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- as.datetime(power3$start)
power3$end <- as.datetime(power3$end)
install.packages("anytime")
library(anytime)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
# power3$start <- strptime(power3$start, format="%Y-%m-%d %H:%M:%S")
power3$start <- anytime(power3$start)
power3$start <- as.datetime(power3$start)
power3$start <- as.datetime(power3$start, mark=F)
power3 <- cbind(temp1[,c(1:3)], dis_time_tour2[,c("start", "end")])
colnames(power3)[4] <- "start"
colnames(power3)[2] <- "Latitude"
colnames(power3)[3] <- "Longitude"
power3$start <- as.datetime(power3$start, tz='GMT')
power3$end <- as.datetime(power3$end)
# power <- temp
# colnames(power)[2] <- c("Latitude")
# colnames(power)[3] <- c("Longitude")
# power$start <- seq.Date(as.Date("2015-01-01"), by = "day", length.out = nrow(power))
# date <- max(power$start)
# power$end <- seq.Date(as.Date(date), by = "day", along.with = nrow(power))
power_geo <- geojsonio::geojson_json(power3,lat="Latitude",lon="Longitude")
leaflet(power_geo) %>%
addProviderTiles("OpenStreetMap.Mapnik")%>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Location,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$`Quantity(CBM)`, "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
icon = makeIcon("DC.png",20,20),
popup = paste("DC"))%>%
addTimeline(
sliderOpts = sliderOptions(
formatOutput = htmlwidgets::JS(
"function(date) {return new Date(date).toTimeString()}"
),
position = "bottomright",
step = 500,
duration = 200,
showTicks = FALSE
)
)
