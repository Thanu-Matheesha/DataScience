rrr=range(abs(df))[3]-range(abs(df))[2]
rr=range(abs(df))[2]-range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)
)
)
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
rr=range(abs(df))[2]-range(abs(df))[1]
rr
r1=range(abs(df))[2]
r0=range(abs(df))[1]
rr=range(abs(df))[3]-range(abs(df))[2]
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
df[2]
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
sss=datatable(df) %>% formatStyle(names(df),
background = styleColorBar(range(df), 'lightblue'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')
sss$x$options$rowCallback
View(sss)
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Dashboard Codes/Reactive vs Observer')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Pharma_Dashboard')
shiny::runApp('KPMG/Dashboard/Waste')
runApp('~/KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
install.packages("ROI")
install.packages("ompr.roi")
install.packages("ompr")
install.packages("ROI.plugin.glpk")
runApp('KPMG/Dashboard/Labor')
n <- 40
m <- 4
capacity <- rep.int(11, m) # all have equal capacities
set.seed(1234)
preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
preferences <- function(student) preference_data[[student]]
# the weight of a student choosing a course
# if the course is not among the preferences, the weight is -100000
weight <- function(student, course) {
p <- which(as.numeric(course) == preferences(as.numeric(student)))
as.integer(if (length(p) == 0) {
-100000
} else {
p
})
}
weight(1, 3)
weight(1, 23)
library(ompr)
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m)) %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to one course
add_constraint(sum_expr(x[i, j], j = 1:m) == 1, i = 1:n)
View(model)
library(ompr.roi)
library(ROI.plugin.glpk)
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
matching <- result %>%
get_solution(x[i,j]) %>%
filter(value > .9) %>%
select(i, j) %>%
rowwise() %>%
mutate(weight = weight(as.numeric(i), as.numeric(j)),
preferences = paste0(preferences(as.numeric(i)), collapse = ",")) %>% ungroup
View(matching)
head(matching)
runApp('C:/KPMG_1/MOIC/moic')
runApp('KPMG/Dashboard/Labor')
my_var <- 5
data <-6
my_var+data
new_var<- my_var+data
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
porker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
porker_vector
days_vector
names(porker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(porker_vector)<-c days_vector
names(porker_vector)<-days_vector
porker_vector
names(roulette_vector)<-days_vector
roulette_vector
porker_vector
Total_vector<-porker_vector+roulette_vector
Total_vector
Total_porker<-sum(porker_vector)
Total_porker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_porker+Total_roulette
Total_week
Total_week<-Total_porker+Total_roulette
Total_week
Total_porker<Total_roulette
days_vector[2]
poker_wednesday <- days_vector[3]
poker_wednesday
porker_vector
poker_wednesday <- poker_vector[3]
poker_wednesday <- porker_vector[3]
poker_wednesday
poker_midweek<- poker_vector[c(2,3,4)]
poker_midweek<-poker_vector[c(2,3,4)]
poker_vector<-c(140,-50,20,-120,240)
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[1:4]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-pokervector>0
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
porker_vector[selection_vector]
poker_vector<-c(140,-50,20,-120,240)
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
porker_vector[selection_vector]
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
selection_vector<-poker_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
roulette_vector[selection_vector]
selection_vector1<-roulette_vector >0
selection_vector1
roulette_vector[selection_vector1]
matrix1<-matrix(1:9,byrow = TRUE,nrow = 3)
matrix1
shiny::runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
library(magrittr) # for %>% operator
# strategy argument must be one of "always_switch" or "never_switch"
play_monty <- function(ndoors = 3, strategy = "always_switch") {
if(ndoors < 3) stop("number of doors must be at least 3")
doors <- paste0("door_", 1:ndoors)
prize_door <- sample(doors, 1)
player_first_choice <- sample(doors, 1)
host_opens_doors <- setdiff(doors, c(prize_door, player_first_choice)) %>%
sample(ndoors - 2)
player_final_choice <- switch(strategy,
"always_switch" = setdiff(doors, c(player_first_choice, host_opens_doors)),
"never_switch" = player_first_choice
)
ifelse(player_final_choice == prize_door, "Won", "Lost")
}
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
shiny::runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
install.packages("shinyalert")
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
View(doorUI)
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
shiny::runApp('KPMG/Dashboard/TSP/New folder')
runApp('KPMG/Dashboard/TSP/New folder')
runApp('KPMG/Dashboard/TSP/New folder')
setwd("~/KPMG/Dashboard/TSP/New folder")
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
View(kml.coordinates)
kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
View(kml.coordinates)
runApp()
View(kml.coordinates)
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
View(kml.coordinates)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
View(kml.coordinates)
options(digits=9)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
options(digits=9)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
View(kml.coordinates)
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
options(digits=16)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
View(kml.coordinates)
kml.coordinates$lat <- as.numeric(kml.coordinates$lat, options(digits=16))
View(kml.coordinates)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon, options(digits=16))
View(kml.coordinates)
kml.coordinates <- read_xlsx("Test1_1.xlsx")
View(kml.coordinates)
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat, options(digits=16))
View(kml.coordinates)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon, options(digits=16))
runApp()
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat, digits=16)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon, digits=16)
View(kml.coordinates)
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
runApp()
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
runApp()
runApp()
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat, digits=16)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon, digits=16)
kml.coordinates$latlon <-paste(kml.coordinates$lat, kml.coordinates$lon, sep = "+")
View(kml.coordinates)
View(kml.coordinates)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
