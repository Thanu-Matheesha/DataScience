runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
library(magrittr) # for %>% operator
# strategy argument must be one of "always_switch" or "never_switch"
play_monty <- function(ndoors = 3, strategy = "always_switch") {
if(ndoors < 3) stop("number of doors must be at least 3")
doors <- paste0("door_", 1:ndoors)
prize_door <- sample(doors, 1)
player_first_choice <- sample(doors, 1)
host_opens_doors <- setdiff(doors, c(prize_door, player_first_choice)) %>%
sample(ndoors - 2)
player_final_choice <- switch(strategy,
"always_switch" = setdiff(doors, c(player_first_choice, host_opens_doors)),
"never_switch" = player_first_choice
)
ifelse(player_final_choice == prize_door, "Won", "Lost")
}
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
shiny::runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
install.packages("shinyalert")
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
View(doorUI)
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
shiny::runApp('KPMG/Dashboard/TSP/New folder')
runApp('KPMG/Dashboard/TSP/New folder')
runApp('KPMG/Dashboard/TSP/New folder')
setwd("~/KPMG/Dashboard/TSP/New folder")
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
View(kml.coordinates)
kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
View(kml.coordinates)
runApp()
View(kml.coordinates)
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
View(kml.coordinates)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
View(kml.coordinates)
options(digits=9)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
options(digits=9)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
View(kml.coordinates)
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
options(digits=16)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
View(kml.coordinates)
kml.coordinates$lat <- as.numeric(kml.coordinates$lat, options(digits=16))
View(kml.coordinates)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon, options(digits=16))
View(kml.coordinates)
kml.coordinates <- read_xlsx("Test1_1.xlsx")
View(kml.coordinates)
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat, options(digits=16))
View(kml.coordinates)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon, options(digits=16))
runApp()
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat, digits=16)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon, digits=16)
View(kml.coordinates)
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
runApp()
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
View(kml.coordinates)
runApp()
runApp()
kml.coordinates <- read_xlsx("Test1_1.xlsx")
kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
kml.coordinates$lat <- as.numeric(kml.coordinates$lat, digits=16)
kml.coordinates$lon <- as.numeric(kml.coordinates$lon, digits=16)
kml.coordinates$latlon <-paste(kml.coordinates$lat, kml.coordinates$lon, sep = "+")
View(kml.coordinates)
View(kml.coordinates)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ifelse
runApp()
kml.coordinates <- read_xlsx("Test1_3.xlsx")
View(kml.coordinates)
kml.coordinates[rowSums(is.na(kml.coordinates)) > 0,]
tt <- kml.coordinates[rowSums(is.na(kml.coordinates)) > 0,]
View(tt)
runApp()
runApp()
runApp()
runApp()
runApp()
load("TSP_data5.RData")
distance_mat <- as.data.frame(distances)
distances
register_google(key = "AIzaSyC5LYaLNN7w5gQh3S6Sot6jgAYtV0a8raM")
set.api.key("AIzaSyC5LYaLNN7w5gQh3S6Sot6jgAYtV0a8raM")
distances <- gmapsdistance(origin = kml.coordinates$latlon,
destination = kml.coordinates$latlon,
combinations = "all",
mode = "driving")$Distance[, -1]
distances <- as.matrix(distances) / 1000
colnames(distances) <- kml.coordinates$Location
rownames(distances) <- kml.coordinates$Location
write.csv(distances, "Distance_mat.csv", row.names = F)
write.csv(distances, "Distance_mat2.csv", row.names = T)
runApp()
View(distances)
distances2 <- read.csv("Distance_mat2.csv")
View(distances2)
View(distances)
distances2 <- as.matrix(distances2)
View(distances2)
View(distances)
View(distances2)
View(distances)
save.image("~/KPMG/Dashboard/TSP/New folder/distance_mat.RData")
distances <- load("distance_mat.RData")
class(distances)
distances
distances <- read.csv("Distance_mat.csv")
distances <- as.matrix(distances)
View(distances)
distances2 <- as.dist(distances)
tsp <- TSP(distances)
distances <- read.csv("Distance_mat.csv")
distances <- as.matrix(distances)
rownames(distances) <- colnames(distances)
View(distances)
runApp()
kml.coordinates <- read.csv("kml.coordinates.csv")
View(kml.coordinates)
runApp()
runApp()
runApp()
# distances3 <- coordvals()
# kml.coordinates <- getData()
# kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
# kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
# kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
# kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
# kml.coordinates$latlon <-paste(kml.coordinates$lat, kml.coordinates$lon, sep = "+")
distances <- as.dist(distances)
tsp <- TSP(distances)
methods <- c(
"nearest_insertion",
"farthest_insertion",
"cheapest_insertion",
"arbitrary_insertion",
"nn",
"repetitive_nn",
"two_opt"
)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method)
})
tour <- solve_TSP(tsp)
test <- min(sapply(tours, function(x) tour_length(x)))
test2 <- Filter(function(x) tour_length(x) == test, tours)
test3 <- list(tour, test2[[1]])
test4 <- min(sapply(test3, function(x) tour_length(x)))
test5 <- Filter(function(x) tour_length(x) == test4, test3)
path <- cut_tour(test5[[1]], cut = "DC", exclude_cut = FALSE)
View(test5)
test5[[1]]
distances <- read.csv("Distance_mat.csv")
distances <- as.matrix(distances)
rownames(distances) <- colnames(distances)
kml.coordinates <- read.csv("kml.coordinates.csv")
runApp()
distances <- read.csv("Distance_mat.csv")
distances <- as.matrix(distances)
rownames(distances) <- colnames(distances)
kml.coordinates <- read.csv("kml.coordinates.csv")
runApp()
runApp()
runApp()
runApp()
distances <- read.csv("Distance_mat.csv")
distances <- as.matrix(distances)
rownames(distances) <- colnames(distances)
kml.coordinates <- read.csv("kml.coordinates.csv")
runApp()
runApp()
runApp()
distances2 <- read.csv("Distance_mat.csv")
distances2 <- as.matrix(distances2)
rownames(distances2) <- colnames(distances2)
kml.coordinates <- read.csv("kml.coordinates.csv")
# distances3 <- coordvals()
# kml.coordinates <- getData()
# kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
# kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
# kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
# kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
# kml.coordinates$latlon <-paste(kml.coordinates$lat, kml.coordinates$lon, sep = "+")
distances <- as.dist(distances2)
tsp <- TSP(distances)
methods <- c(
"nearest_insertion",
"farthest_insertion",
"cheapest_insertion",
"arbitrary_insertion",
"nn",
"repetitive_nn",
"two_opt"
)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method)
})
tour <- solve_TSP(tsp)
test <- min(sapply(tours, function(x) tour_length(x)))
test2 <- Filter(function(x) tour_length(x) == test, tours)
test3 <- list(tour, test2[[1]])
test4 <- min(sapply(test3, function(x) tour_length(x)))
test5 <- Filter(function(x) tour_length(x) == test4, test3)
path <- cut_tour(test5[[1]], cut = "Point29", exclude_cut = FALSE)
tour_order <- as.integer(path)
kml.coordinates <- kml.coordinates[tour_order,]
kml.coordinates$Tour_Number <- 1:nrow(kml.coordinates)
View(kml.coordinates)
path <- cut_tour(test5[[1]], cut = "DC", exclude_cut = FALSE)
path <- cut_tour(test5[[1]], cut = "Point29", exclude_cut = FALSE)
tour_order <- as.integer(path)
test5[[1]]
View(test5)
test5[[1]]
View(kml.coordinates)
load("TSP_data5.RData")
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method)
})
tour <- solve_TSP(tsp)
test <- min(sapply(tours, function(x) tour_length(x)))
test2 <- Filter(function(x) tour_length(x) == test, tours)
test3 <- list(tour, test2[[1]])
test4 <- min(sapply(test3, function(x) tour_length(x)))
test5 <- Filter(function(x) tour_length(x) == test4, test3)
path <- cut_tour(test5[[1]], cut = "Point29", exclude_cut = FALSE)
tour_order <- as.integer(path)
path <- cut_tour(test5[[1]], cut = "Point28", exclude_cut = FALSE)
tour_order <- as.integer(path)
distances2 <- read.csv("Distance_mat.csv")
distances2 <- as.matrix(distances2)
rownames(distances2) <- colnames(distances2)
kml.coordinates <- read.csv("kml.coordinates.csv")
# distances3 <- coordvals()
# kml.coordinates <- getData()
# kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
# kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
# kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
# kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
# kml.coordinates$latlon <-paste(kml.coordinates$lat, kml.coordinates$lon, sep = "+")
distances <- as.dist(distances2)
tsp <- TSP(distances)
methods <- c(
"nearest_insertion",
"farthest_insertion",
"cheapest_insertion",
"arbitrary_insertion",
"nn",
"repetitive_nn",
"two_opt"
)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method)
})
tour <- solve_TSP(tsp)
test <- min(sapply(tours, function(x) tour_length(x)))
test2 <- Filter(function(x) tour_length(x) == test, tours)
test3 <- list(tour, test2[[1]])
test4 <- min(sapply(test3, function(x) tour_length(x)))
test5 <- Filter(function(x) tour_length(x) == test4, test3)
path <- cut_tour(test5[[1]], cut = "Point29", exclude_cut = FALSE)
tour_order <- as.integer(path)
path <- cut_tour(test5[[1]], cut = "Point1", exclude_cut = FALSE)
tour_order <- as.integer(path)
path <- cut_tour(test5[[1]], cut = "Point5", exclude_cut = FALSE)
tour_order <- as.integer(path)
distances2 <- read.csv("Distance_mat.csv")
distances2 <- as.matrix(distances2)
rownames(distances2) <- colnames(distances2)
# distances3 <- coordvals()
# kml.coordinates <- getData()
# kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
# kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
# kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
# kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
# kml.coordinates$latlon <-paste(kml.coordinates$lat, kml.coordinates$lon, sep = "+")
distances3 <- as.dist(distances2)
load("TSP_data5.RData")
distances2 <- read.csv("Distance_mat.csv")
distances2 <- as.matrix(distances2)
rownames(distances2) <- colnames(distances2)
View(distances2)
distances2 <- read.csv("Distance_mat.csv")
View(distances2)
load("TSP_data5.RData")
View(kml.coordinates)
#   NAME <- NAME[nchar(NAME) > 0]
#   NAME <- NAME[!NAME %in% x]
#
#   kml.coordinates[i,] <- matrix(c(NAME,coordinates),ncol=4)
# }
#
# kml.coordinates <- as.data.frame(kml.coordinates)
# kml.coordinates <- kml.coordinates[, -4]
# kml.coordinates$latlon <- paste0(kml.coordinates$lat,"+",kml.coordinates$lon)
# write.csv(kml.coordinates, "kml.coordinates.csv", row.names = F)
kml.coordinates <- read.csv("kml.coordinates.csv")
View(kml.coordinates)
register_google(key = "AIzaSyC5LYaLNN7w5gQh3S6Sot6jgAYtV0a8raM")
set.api.key("AIzaSyC5LYaLNN7w5gQh3S6Sot6jgAYtV0a8raM")
distances <- gmapsdistance(origin = kml.coordinates$latlon,
destination = kml.coordinates$latlon,
combinations = "all",
mode = "driving")$Distance[, -1]
distances <- as.matrix(distances) / 1000
colnames(distances) <- kml.coordinates$Location
rownames(distances) <- kml.coordinates$Location
write.csv(distances, "Distance_mat2.csv", row.names = T)
write.csv(distances, "Distance_mat.csv", row.names = F)
save.image("~/KPMG/Dashboard/TSP/New folder/new_dis_mat.RData")
View(distances)
distances2 <- read.csv("Distance_mat.csv")
distances2 <- as.matrix(distances2)
rownames(distances2) <- colnames(distances2)
View(distances2)
kml.coordinates <- read.csv("kml.coordinates.csv")
# distances3 <- coordvals()
# kml.coordinates <- getData()
# kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
# kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
# kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
# kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
# kml.coordinates$latlon <-paste(kml.coordinates$lat, kml.coordinates$lon, sep = "+")
distances3 <- as.dist(distances2)
tsp <- TSP(distances)
methods <- c(
"nearest_insertion",
"farthest_insertion",
"cheapest_insertion",
"arbitrary_insertion",
"nn",
"repetitive_nn",
"two_opt"
)
# distances3 <- coordvals()
# kml.coordinates <- getData()
# kml.coordinates$Link <-  gsub(".*q=(.+)&z.*", "\\1", kml.coordinates$Link)
# kml.coordinates <- separate(data = kml.coordinates, col = Link, into = c("lat", "lon"), sep = "%2C")
# kml.coordinates$lat <- as.numeric(kml.coordinates$lat)
# kml.coordinates$lon <- as.numeric(kml.coordinates$lon)
# kml.coordinates$latlon <-paste(kml.coordinates$lat, kml.coordinates$lon, sep = "+")
distances <- as.dist(distances2)
tsp <- TSP(distances)
methods <- c(
"nearest_insertion",
"farthest_insertion",
"cheapest_insertion",
"arbitrary_insertion",
"nn",
"repetitive_nn",
"two_opt"
)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method)
})
tour <- solve_TSP(tsp)
test <- min(sapply(tours, function(x) tour_length(x)))
test2 <- Filter(function(x) tour_length(x) == test, tours)
test3 <- list(tour, test2[[1]])
test4 <- min(sapply(test3, function(x) tour_length(x)))
test5 <- Filter(function(x) tour_length(x) == test4, test3)
path <- cut_tour(test5[[1]], cut = "Point29", exclude_cut = FALSE)
tour_order <- as.integer(path)
runApp()
runApp()
kml.coordinates <- read.csv("kml.coordinates.csv")
View(kml.coordinates)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/KPMG/Dashboard/TSP/New folder/New folder2")
setwd("~/KPMG/Dashboard/TSP/New folder/New folder(2)")
setwd("~/KPMG/Dashboard/TSP/New folder/New folder (2)")
tt <- read_xlsx("Test1.xlsx")
View(tt)
colnames(tt)
runApp('~/KPMG/Dashboard/TSP/New folder')
runApp('~/KPMG/Dashboard/TSP/New folder')
