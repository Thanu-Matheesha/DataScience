runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
library(magrittr) # for %>% operator
# strategy argument must be one of "always_switch" or "never_switch"
play_monty <- function(ndoors = 3, strategy = "always_switch") {
if(ndoors < 3) stop("number of doors must be at least 3")
doors <- paste0("door_", 1:ndoors)
prize_door <- sample(doors, 1)
player_first_choice <- sample(doors, 1)
host_opens_doors <- setdiff(doors, c(prize_door, player_first_choice)) %>%
sample(ndoors - 2)
player_final_choice <- switch(strategy,
"always_switch" = setdiff(doors, c(player_first_choice, host_opens_doors)),
"never_switch" = player_first_choice
)
ifelse(player_final_choice == prize_door, "Won", "Lost")
}
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
shiny::runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
install.packages("shinyalert")
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
View(doorUI)
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
setwd("~/KPMG/Dashboard/TSP")
library(sp)
library(maptools)
library(dplyr)
library(ggplot2)
library(ggmap)
library(gmapsdistance)
library(TSP)
library(purrr)
load("TSP_data4.RData")
trip2 <- base::merge(trip, kml.coordinates[, c(1,4)], by.x = "start", by.y = "Location", all.x = T)
View(trip2)
trip2 <- base::merge(trip2, kml.coordinates[, c(1,4)], by.x = "end", by.y = "Location", all.x = T)
trip2 <- as.data.frame(trip2[,c("start","end", "duration", "distance", "latlon.x", "latlon.y")])
trip2$Time <- trip2$Time/3600
trip2 <- base::merge(trip, kml.coordinates[, c(1,4)], by.x = "start", by.y = "Location", all.x = T)
trip2 <- base::merge(trip2, kml.coordinates[, c(1,4)], by.x = "end", by.y = "Location", all.x = T)
trip2 <- as.data.frame(trip2[,c("start","end", "duration", "distance", "latlon.x", "latlon.y")])
View(trip2)
length(unique(trip$start))
View(trip)
View(kml.coordinates)
kml.coordinates$lon <- as.numeric(as.character(kml.coordinates$lon))
kml.coordinates$lat <- as.numeric(as.character(kml.coordinates$lat))
kml.coordinates <- kml.coordinates[tour_order,]
tour_order <- as.integer(tour)
kml.coordinates <- kml.coordinates[tour_order,]
View(kml.coordinates)
View(kml.coordinates)
View(kml.coordinates)
shiny::runApp()
runApp()
load("TSP_data4.RData")
View(kml.coordinates)
write.csv(kml.coordinates, "kml.coordinates.csv", row.names = F)
View(trip2)
sum(trip2$Time)
sum(trip2$Distance)
sum(trip2$duration)
sum(trip2$distance)
tour_length(tour)
trip2 <- base::merge(trip, kml.coordinates[, c(1,4)], by.x = "start", by.y = "Location", all.x = T)
trip2 <- base::merge(trip2, kml.coordinates[, c(1,4)], by.x = "end", by.y = "Location", all.x = T)
trip2 <- as.data.frame(trip2[,c("start","end", "duration", "distance", "latlon.x", "latlon.y")])
trip2 <- trip2 %>%
nest(c(latlon.x,latlon.y)) %>%
mutate(models = lapply(data,
function(df){gmapsdistance(origin = df$latlon.x,
destination = df$latlon.y,
mode = "driving",
combinations = "pairwise")})) %>%
mutate( dfs = lapply(models, function(x){  bind_cols(x) })) %>%
unnest(dfs)
library(tidyverse)
trip2 <- trip2 %>%
nest(c(latlon.x,latlon.y)) %>%
mutate(models = lapply(data,
function(df){gmapsdistance(origin = df$latlon.x,
destination = df$latlon.y,
mode = "driving",
combinations = "pairwise")})) %>%
mutate( dfs = lapply(models, function(x){  bind_cols(x) })) %>%
unnest(dfs)
View(trip2)
View(trip2)
runApp()
runApp()
runApp()
load("TSP_data4.RData")
View(trip)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("TSP_data4.RData")
tsp
distances
tsp
data.frame(tsp)
version
tour <- solve_TSP(tsp , start = 1)
setwd("~/KPMG/Dashboard/TSP")
library(sp)
library(maptools)
library(dplyr)
library(ggplot2)
library(ggmap)
library(gmapsdistance)
library(TSP)
library(purrr)
load("TSP_data4.RData")
tour <- solve_TSP(tsp , start = 1)
tour <- solve_TSP(tsp , start = 1L)
tour[1]
tour_length(tour)
tour <- solve_TSP(tsp , start = 1L)
tour_length(tour)
tour[1]
dotchart(c(sapply(tours, FUN = attr, "tour_length"),
+ optimal = opt), xlab = "tour length", xlim = c(0,
+ 500))
dotchart(c(sapply(tours, FUN = attr, "tour_length"), optimal = opt), xlab = "tour length", xlim = c(0, 500))
opt <- 14497
dotchart(c(sapply(tours, FUN = attr, "tour_length"), optimal = opt), xlab = "tour length", xlim = c(0, 500))
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method, start = 1L)
})
View(tours)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method, start = 2L)
})
View(tours)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method, start = 2L)
})
View(tours)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method, start = 2)
})
View(tours)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method, start = 2)
})
View(tours)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method, start = 3)
})
View(tours)
tours[3]
tours[[2]]
dotchart(c(sapply(tours, FUN = attr, "tour_length")), xlab = "tour length", xlim = c(0, 500))
dotchart(c(sapply(tours, FUN = attr, "tour_length")), xlab = "tour length", xlim = c(0, 100))
dotchart(c(sapply(tours, FUN = attr, "tour_length")), xlab = "tour length", xlim = c(0, 50))
test <- as.data.frame(tours)
View(test)
sapply(tours, FUN = attr, "tour_length")
tours$concorde <- solve_TSP(tsp, method = "concorde")
View(tours)
distances
View(kml.coordinates)
# opt <- 14497
# dotchart(c(sapply(tours, FUN = attr, "tour_length")), xlab = "tour length", xlim = c(0, 50))
startPoint <- Point1
setwd("~/KPMG/Dashboard/TSP/New folder")
library(sp)
library(maptools)
library(dplyr)
library(ggplot2)
library(ggmap)
library(gmapsdistance)
library(TSP)
library(purrr)
load("TSP_data5.RData")
load("TSP_data5.RData")
tour_distance <- lapply(tours, function(i)tour_length(i))
View(tour_distance)
tour_new <- ifelse(any(sapply(tour_distance,function(x) x < tour_length(tour))) == TRUE)
test <- Filter(function(x) min(tour_length(i)), tours)
test <- Filter(function(x) min(tour_length(x)), tours)
View(test)
test <- Filter(function(x) min(tour_length(x)), tours)
test <- Filter(function(x) min(tour_length(x)), tours)
test <- Filter(function(x) min(tour_length(x)), lapply(tours, function(i)tour_length(i)))
test <- Filter(min(tour_length(x)lapply(tours, function(i)tour_length(i))), tours)
test <- Filter(min(function(i)tour_length(i)), tours)
test <- Filter(function(i) min(tour_length(i)), tours)
View(test)
test <- Filter(function(i) min(tour_length(i)), tours)
View(test)
test[[1]]
tour_distance <- lapply(tours, function(i)tour_length(i))
test <- Filter(function(i) min(tour_distance(i)), tours)
test <- tour_distance[unlist(min(tour_distance))]
class(tour_distance)
test <- sapply(tours, function(x) min(tour_length(x)))
path <- cut_tour(test, cut = "Point29", exclude_cut = FALSE)
tour
test
View(tour_distance)
tour_distance[[6]]
View(tours)
tours[[6]]
test <- min(sapply(tours, function(x) tour_length(x)))
test2 <- Filter(function(x) tour_length(x) == test, tours)
View(test2)
test2[[1]]
test2[[2]]
test <- min(sapply(tours, function(x) tour_length(x)))
test2 <- Filter(function(x) tour_length(x) == test, tours)
View(test2)
test3 <- test2[-2]
View(test3)
path <- cut_tour(test3, cut = "Point29", exclude_cut = FALSE)
test4 <- unlist(test3)
test4
tour
class(test3[[1]])
path <- cut_tour(test2[[1]], cut = "Point29", exclude_cut = FALSE)
tour_order
tour_order <- as.integer(path)
tour_order
install.packages("googleway")
kml.coordinates <- kml.coordinates[tour_order,]
library(dplyr)
library(googleway)
origin1 <- kml.coordinates[,c(1:3)]
destination <- rbind(kml.coordinates[2:nrow(kml.coordinates),], kml.coordinates[1, ])[,c(1:3)]
new_tour <- cbind(origin1, destination)
colnames(new_tour)[4] <- "des"
dis_time_tour <- new_tour[,c("Location", "des")]
dis_time_tour <- base::merge(dis_time_tour, kml.coordinates[, c(1,4)], by = "Location", all.x = T, sort = F)
dis_time_tour <- base::merge(dis_time_tour, kml.coordinates[, c(1,4)], by.x = "des", by.y = "Location", all.x = T, sort=F)
dis_time_tour <- dis_time_tour[,c("Location", "des", "latlon.x", "latlon.y")]
library(tidyverse)
dis_time_tour <- dis_time_tour %>%
nest(c(latlon.x,latlon.y)) %>%
mutate(models = lapply(data,
function(df){gmapsdistance(origin = df$latlon.x,
destination = df$latlon.y,
mode = "driving",
combinations = "pairwise")})) %>%
mutate( dfs = lapply(models, function(x){  bind_cols(x) })) %>%
unnest(dfs)
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolylines(data = temp, lng = ~lon, lat = ~lat, group = ~Location) %>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Address,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$Quantity.CBM., "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
icon = makeIcon("DC.png",20,20),
popup = paste("DC"))
library(leaflet)
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolylines(data = temp, lng = ~lon, lat = ~lat, group = ~Location) %>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Address,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$Quantity.CBM., "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
icon = makeIcon("DC.png",20,20),
popup = paste("DC"))
View(kml.coordinates)
origin1 <- kml.coordinates[,c(1:3)]
destination <- rbind(kml.coordinates[2:nrow(kml.coordinates),], kml.coordinates[1, ])[,c(1:3)]
new_tour <- cbind(origin1, destination)
colnames(new_tour)[4] <- "des"
dis_time_tour <- new_tour[,c("Location", "des")]
dis_time_tour <- base::merge(dis_time_tour, kml.coordinates[, c(1,4)], by = "Location", all.x = T, sort = F)
dis_time_tour <- base::merge(dis_time_tour, kml.coordinates[, c(1,4)], by.x = "des", by.y = "Location", all.x = T, sort=F)
dis_time_tour <- dis_time_tour[,c("Location", "des", "latlon.x", "latlon.y")]
dis_time_tour <- dis_time_tour %>%
nest(c(latlon.x,latlon.y)) %>%
mutate(models = lapply(data,
function(df){gmapsdistance(origin = df$latlon.x,
destination = df$latlon.y,
mode = "driving",
combinations = "pairwise")})) %>%
mutate( dfs = lapply(models, function(x){  bind_cols(x) })) %>%
unnest(dfs)
shiny::runApp('~/KPMG/Dashboard/TSP')
runApp('~/KPMG/Dashboard/TSP')
load("TSP_data5.RData")
tour <- solve_TSP(tsp)
tour
View(dis_time_tour)
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolylines(data = temp, lng = ~lon, lat = ~lat, group = ~Location) %>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Address,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$Quantity.CBM., "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
# icon = makeIcon("DC.png",20,20),
color = "green"
popup = paste("DC"))
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolylines(data = temp, lng = ~lon, lat = ~lat, group = ~Location) %>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Address,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$Quantity.CBM., "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
# icon = makeIcon("DC.png",20,20),
color = "Green"
popup = paste("DC"))
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolylines(data = temp, lng = ~lon, lat = ~lat, group = ~Location) %>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Address,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$Quantity.CBM., "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
# icon = makeIcon("DC.png",20,20),
color = "green",
popup = paste("DC"))
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolylines(data = temp, lng = ~lon, lat = ~lat, group = ~Location) %>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type != "DC", ],
lat = ~lat,
lng = ~lon,
popup = paste("Address: ", kml.coordinates$Address,"<br/>",
"Order No: ", kml.coordinates$Order.No., "<br/>",
"Quantity: ", kml.coordinates$Quantity.CBM., "<br/>"),
color = "red",
stroke = FALSE,
radius = 7,
fillOpacity = 0.8) %>%
addCircleMarkers(data = kml.coordinates[kml.coordinates$Location.Type == "DC", ],
lng = ~lon,
lat = ~lat,
# icon = makeIcon("DC.png",20,20),
color = "green",
popup = paste("DC"))
test3 <- list(tour, test2[1])
test <- min(sapply(tours, function(x) tour_length(x)))
test2 <- Filter(function(x) tour_length(x) == test, tours)
test3 <- list(tour, test2[1])
View(test3)
View(test3)
View(test2)
View(test3)
View(test2)
View(test3)
test3 <- list(tour, test2[[1]])
View(test3)
test3 <- list(tour, test2[[1]])
View(test3)
test4 <- min(sapply(test3, function(x) tour_length(x)))
test5 <- Filter(function(x) tour_length(x) == test4, test3)
View(test5)
View(test3)
test3[[2]]
test5[[1]]
path <- cut_tour(test5[[1]], cut = "Point29", exclude_cut = FALSE)
tour_length(test5[[1]])
View(kml.coordinates)
length(unique(kml.coordinates$Location))
runApp('~/KPMG/Dashboard/TSP')
runApp('~/KPMG/Dashboard/TSP')
load("TSP_data5.RData")
kml.coordinates <- kml.coordinates[tour_order,]
kml.coordinates$Tour_Number <- 1:nrow(kml.coordinates)
View(kml.coordinates)
runApp('~/KPMG/Dashboard/TSP')
load("TSP_data5.RData")
sum(dis_time_tour$Time)
setwd("~/KPMG/Dashboard/TSP")
#   NAME <- NAME[nchar(NAME) > 0]
#   NAME <- NAME[!NAME %in% x]
#
#   kml.coordinates[i,] <- matrix(c(NAME,coordinates),ncol=4)
# }
#
# kml.coordinates <- as.data.frame(kml.coordinates)
# kml.coordinates <- kml.coordinates[, -4]
# kml.coordinates$latlon <- paste0(kml.coordinates$lat,"+",kml.coordinates$lon)
# write.csv(kml.coordinates, "kml.coordinates.csv", row.names = F)
kml.coordinates <- read.csv("kml.coordinates_3.csv")
register_google(key = "AIzaSyC5LYaLNN7w5gQh3S6Sot6jgAYtV0a8raM")
set.api.key("AIzaSyC5LYaLNN7w5gQh3S6Sot6jgAYtV0a8raM")
distances <- gmapsdistance(origin = kml.coordinates$latlon,
destination = kml.coordinates$latlon,
combinations = "all",
mode = "driving")$Distance[, -1]
distances <- as.matrix(distances) / 1000
colnames(distances) <- kml.coordinates$Location
rownames(distances) <- kml.coordinates$Location
distances <- as.dist(distances)
tsp <- TSP(distances)
methods <- c(
"nearest_insertion",
"farthest_insertion",
"cheapest_insertion",
"arbitrary_insertion",
"nn",
"repetitive_nn",
"two_opt"
)
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method)
})
tour <- solve_TSP(tsp)
sapply(tours, function(x) tour_length(x))
tour_length(tour)
runApp()
tours <- methods %>% map(function(method) {
solve_TSP(tsp, method)
})
tour <- solve_TSP(tsp)
sapply(tours, function(x) tour_length(x))
tour_length(tour)
runApp()
runApp()
runApp()
runApp()
runApp()
