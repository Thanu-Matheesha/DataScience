View(df)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
colnames(df)
runApp('KPMG/Commercial Credit')
colnames(df) - c('A', 'B')
colnames(df) <- c('A', 'B')
Col0 <- c("AA", "BB", "CC", "DD","EE","FF")
Col1 <- c(2,2,2,6,1,1)
Col2 <- c(2,2,2,1,3,4)
Col3 <- c(2,2,3,4,6,6)
Col4 <- c(2,2,3,1,2,1)
Col5 <- c(2,1,1,1,1,4)
Col6 <- c(2,4,2,5,4,4)
Col7 <- c(2,4,2,5,4,4)
Col8 <- c(2,2,3,4,5,4)
Col9 <- c(1,3,3,2,2,2)
df<-data.frame(Col0,Col1,Col2,Col3,Col4,Col5,Col6,Col7,Col8,Col9)
data <- df %>%
mutate(icon=ifelse(
df$Col2 < df$Col7,
as.character(icon("angle-up")),
as.character(icon("angle-down"))
)) %>% formatStyle(
'Col1',
backgroundColor = styleEqual(c(2, 1), c('gray', 'yellow'))
)
library(DT)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
View(df)
View(df)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
data <- df %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
mutate(icon=ifelse(
df$V2 < df$V3,
as.character(icon("angle-up")),
as.character(icon("angle-down"))
))
data <- df %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
) %>%  mutate(icon=ifelse(
df$V2 < df$V3,
as.character(icon("angle-up")),
as.character(icon("angle-down"))
))
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>%  mutate(icon=ifelse(
df$V2 < df$V3,
as.character(icon("angle-up")),
as.character(icon("angle-down"))
))
View(df)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
df <- head(mtcars,100)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
datatable(
df,
options = list(
rowCallback=JS(paste0("function(row, data) {",
paste(lapply(1:ncol(df),function(i){
paste0("var value=Math.abs(data[",i,"]);
var value2=data[",i,"];
if (value!==null){
if(value2<0){
$(this.api().cell(row,",i,").node()).css({'background':isNaN(parseFloat(value)) || value <=",r0," ? '' : 'linear-gradient(90deg, transparent ' + (",r1," - value)/",rr," * 100 + '%, red ' + (",r1," - value)/",rr," * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});
}else{
$(this.api().cell(row,",i,").node()).css({'background':isNaN(parseFloat(value)) || value <=",r0," ? '' : 'linear-gradient(90deg, transparent ' + (",r1," - value)/",rr," * 100 + '%, lightblue ' + (",r1," - value)/",rr," * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});
}
} ")
}),collapse="\n"),
"}"))
)
)
library(shiny)
library(shinydashboard)
library(plotly)
library(plyr)
library(dplyr)
library(DT)
library(readxl)
library(ggplot2)
library(plotrix)
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
datatable(
df,
options = list(
rowCallback=JS(paste0("function(row, data) {",
paste(lapply(1:ncol(df),function(i){
paste0("var value=Math.abs(data[",i,"]);
var value2=data[",i,"];
if (value!==null){
if(value2<0){
$(this.api().cell(row,",i,").node()).css({'background':isNaN(parseFloat(value)) || value <=",r0," ? '' : 'linear-gradient(90deg, transparent ' + (",r1," - value)/",rr," * 100 + '%, red ' + (",r1," - value)/",rr," * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});
}else{
$(this.api().cell(row,",i,").node()).css({'background':isNaN(parseFloat(value)) || value <=",r0," ? '' : 'linear-gradient(90deg, transparent ' + (",r1," - value)/",rr," * 100 + '%, lightblue ' + (",r1," - value)/",rr," * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});
}
} ")
}),collapse="\n"),
"}"))
)
)
data <- data.frame(a=c(rep("a",9)),value=c(-4,-3,-2,-1,0,1,2,3,4))
datatable(data) %>%
formatStyle('value',
background=color_from_middle(data$value,'red','blue'))
data <- data.frame(a=c(rep("a",9)),value=c(-4,-3,-2,-1,0,1,2,3,4))
color_from_middle <- function (data, color1,color2)
{
max_val=max(abs(data))
JS(sprintf("isNaN(parseFloat(value)) || value < 0 ? 'linear-gradient(90deg, transparent, transparent ' + (50 + value/%s * 50) + '%%, %s ' + (50 + value/%s * 50) + '%%,%s  50%%,transparent 50%%)': 'linear-gradient(90deg, transparent, transparent 50%%, %s 50%%, %s ' + (50 + value/%s * 50) + '%%, transparent ' + (50 + value/%s * 50) + '%%)'",
max_val,color1,max_val,color1,color2,color2,max_val,max_val))
}
datatable(data) %>%
formatStyle('value',
background=color_from_middle(data$value,'red','blue'))
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
View(df)
r2=range(abs(df))[3]
runApp('KPMG/Commercial Credit')
rrr=range(abs(df))[3]-range(abs(df))[2]
View(df)
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
View(df)
View(df)
df = data.frame(a=c(rep("a",9)),value=c(-4,-3,-2,-1,0,1,2,3,4))
View(df)
runApp('KPMG/Commercial Credit')
View(df)
View(df)
runApp('KPMG/Commercial Credit')
rrr=range(abs(df))[3]-range(abs(df))[2]
rr=range(abs(df))[2]-range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)
)
)
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
rr=range(abs(df))[2]-range(abs(df))[1]
rr
r1=range(abs(df))[2]
r0=range(abs(df))[1]
rr=range(abs(df))[3]-range(abs(df))[2]
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
df[2]
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
sss=datatable(df) %>% formatStyle(names(df),
background = styleColorBar(range(df), 'lightblue'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')
sss$x$options$rowCallback
View(sss)
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Dashboard Codes/Reactive vs Observer')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Pharma_Dashboard')
shiny::runApp('KPMG/Dashboard/Waste')
runApp('~/KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
install.packages("ROI")
install.packages("ompr.roi")
install.packages("ompr")
install.packages("ROI.plugin.glpk")
runApp('KPMG/Dashboard/Labor')
n <- 40
m <- 4
capacity <- rep.int(11, m) # all have equal capacities
set.seed(1234)
preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
preferences <- function(student) preference_data[[student]]
# the weight of a student choosing a course
# if the course is not among the preferences, the weight is -100000
weight <- function(student, course) {
p <- which(as.numeric(course) == preferences(as.numeric(student)))
as.integer(if (length(p) == 0) {
-100000
} else {
p
})
}
weight(1, 3)
weight(1, 23)
library(ompr)
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m)) %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to one course
add_constraint(sum_expr(x[i, j], j = 1:m) == 1, i = 1:n)
View(model)
library(ompr.roi)
library(ROI.plugin.glpk)
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
matching <- result %>%
get_solution(x[i,j]) %>%
filter(value > .9) %>%
select(i, j) %>%
rowwise() %>%
mutate(weight = weight(as.numeric(i), as.numeric(j)),
preferences = paste0(preferences(as.numeric(i)), collapse = ",")) %>% ungroup
View(matching)
head(matching)
runApp('C:/KPMG_1/MOIC/moic')
runApp('KPMG/Dashboard/Labor')
?set.seed
n <- 40
m <- 4
capacity <- rep.int(11, m) # all have equal capacities
set.seed(1234)
preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
preferences <- function(student) preference_data[[student]]
preferences(1)
preferences(2)
shiny::runApp('C:/KPMG_1/MOIC/moic')
# the weight of a student choosing a course
# if the course is not among the preferences, the weight is -100000
weight <- function(student, course) {
p <- which(as.numeric(course) == preferences(as.numeric(student)))
as.integer(if (length(p) == 0) {
-100000
} else {
p
})
}
weight(1,1)
weight(2,1)
?lapply
n <- 40
m <- 4
capacity <- rep.int(11, m) # all have equal capacities
set.seed(1234)
preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
View(preference_data)
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
setwd("~/KPMG/Dashboard/Labor")
library(plotly)
library(plyr)
library(dplyr)
library(DT)
library(readxl)
path <- readxl_example("Labor.xlsx")
library(readxl)
path <- readxl_example("Labor.xlsx")
path <- readxl_example("Labor.xls")
mylist <- lapply(excel_sheets(path), read_excel, path = path)
sheetnames <- excel_sheets(path)
path <- readxl_example("Labor.xlsx")
lst <- lapply(1:8, function(i) read_excel("Labor.xlsx", sheet = i))
lst <- lapply(1:5, function(i) read_excel("Labor.xlsx", sheet = i))
View(lst)
lst[[1]]
path <- "Labor.xlsx"
mad <- path %>%
excel_sheets() %>%
set_names() %>%
map(read_excel,
path = path)
install.packages("purrr")
library(purrr)
library(purrr)
tab_names <- excel_sheets(path = Labor)
library(readxl)
tab_names <- excel_sheets(path = Labor)
xl_data <- "Labor.xlsx"
tab_names <- excel_sheets(path = xl_data)
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
list_all[[1]]
xl_data <- "Labor.xlsx"
tab_names <- excel_sheets(path = xl_data)
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
n <- 40
m <- 4
capacity <- rep.int(11, m) # all have equal capacities
set.seed(1234)
preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
peew <- function(swww) list_all[[swww]]
peew(1)
weightt <- function(labor, shift) {
p <- which(as.numeric(shift) == peew(as.numeric(labor)))
as.integer(if (length(p) == 0) {
-100000
} else {
p
})
}
weightt(1,1)
peew(1)
weight(2,1)
n <- 40
m <- 4
capacity <- rep.int(11, m) # all have equal capacities
set.seed(1234)
preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
preferences <- function(student) preference_data[[student]]
preferences(2)
# the weight of a student choosing a course
# if the course is not among the preferences, the weight is -100000
weight <- function(student, course) {
p <- which(as.numeric(course) == preferences(as.numeric(student)))
as.integer(if (length(p) == 0) {
-100000
} else {
p
})
}
weight(2,1)
peew(1)
View(list_all)
View(list_all[[1]])
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
peew <- function(swww) list_all[[swww(c(-1,),c(,-1))]]
peew(1)
peew <- function(swww) list_all[[swww(c(-1,),c(,-1))]]
peew(1)
source('~/.active-rstudio-document', echo=TRUE)
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
peew <- function(swww) list_all[[swww[c(-1,),c(,-1)]]]
peew(1)
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
peew <- function(swww) list_all[[swww[(-1,),(,-1)]]]
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
peew <- function(swww) list_all[[swww[-1,],[,-1]]]
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
peew <- function(swww) list_all[[swww([-1,],[,-1])]]
source('~/.active-rstudio-document', echo=TRUE)
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
peew <- function(swww) list_all[[swww]]
peew(1)
class(list_all[[1]])
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
peew <- function(swww) list_all[[swww[-1,]]]
peew(1)
list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
peew <- function(swww) list_all[[swww]]
peew(1)
peew(1)
peew(1)
list_all <- lapply(list_all, function(x) x[-1,-1])
list_all[[1]]
pre <- function(student) list_all[[student]]
pre(1)
weightt <- function(labor, shift) {
p <- which(as.numeric(shift) == pre(as.numeric(labor)))
as.integer(if (length(p) == 0) {
-100000
} else {
p
})
}
weightt(1,1)
shiny::runApp()
runApp()
runApp()
setwd("~/KPMG/Dashboard/Waste")
library(dplyr)
library(shiny)
library(dygraphs)
library(forecast)
library(shinyjs)
library(reshape2)
library(DT)
library(readxl)
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
