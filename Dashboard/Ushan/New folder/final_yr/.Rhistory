kmeans(selectedData2(), input$clusters2)
})
output$plot2 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A",
"#984EA3", "#FF7F00", "#FFFF33",
"#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData2(),
col = clusters2()$cluster,
pch = 20, cex = 3)
points(clusters2()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
}
shiny::runApp('Projects/ushan')
View(USPersonalExpenditure)
View(USPersonalExpenditure)
da <- data.frame(1,us,jaj,jaj,)
da <- data.frame(1,"us",jaj,jaj,)
da <- data.frame(1,"us","sa","jjs")
View(da)
shiny::runApp('Projects/ushan')
shiny::runApp('Projects/ushan')
runApp('Projects/Grameen')
runApp('Projects/Grameen')
runApp('Projects/ushan')
shiny::runApp('Projects/Grameen')
runApp('Projects/ushan')
runApp('Projects/ushan')
install.packages("ShinyImage")
runApp('Projects/ushan/u1')
runApp('Projects/ushan/test_1.R')
runApp('Projects/ushan/test_1.R')
runApp('Projects/ushan/u1/gt.R')
runApp('Projects/ushan/u1/gt.R')
runApp('Projects/ushan/u1/gt.R')
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Value boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
# Dynamic valueBoxes
valueBoxOutput("progressBox"),
valueBoxOutput("approvalBox")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderValueBox({
valueBox(
paste0(25 + input$count, "%"), "Progress", icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderValueBox({
valueBox(
"80%", "Approval", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
}
shinyApp(ui, server)
shiny::runApp('Projects/Grameen')
runApp('t')
runApp('Projects/Grameen/t')
runApp('Projects/Grameen/t')
if (interactive()) {
ui <- fluidPage(
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
progress <- Progress$new(session, min=1, max=15)
on.exit(progress$close())
progress$set(message = 'Calculation in progress',
detail = 'This may take a while...')
for (i in 1:15) {
progress$set(value = i)
Sys.sleep(0.5)
}
plot(cars)
})
}
shinyApp(ui, server)
}
shiny::runApp('Projects/Grameen')
install.packages("devtools")
devtools::install_github("daattali/shinyjs")
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Include shinyjs
actionButton("button", "Click me"),
textInput("text", "Text")
)
server <- function(input, output) {
observeEvent(input$button, {
toggle("text")  # toggle is a shinyjs function
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Include shinyjs
actionButton("button", "Click me"),
textInput("text", "Text")
)
server <- function(input, output) {
observeEvent(input$button, {
toggle("text")  # toggle is a shinyjs function
})
}
ui <- fluidPage(
selectInput("dataset", "Dataset", c("diamonds", "rock", "pressure", "cars")),
conditionalPanel( condition = "output.nrows",
checkboxInput("headonly", "Only use first 1000 rows"))
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$nrows <- reactive({
nrow(datasetInput())
})
outputOptions(output, "nrows", suspendWhenHidden = FALSE)
}
shinyApp(ui, server)
shiny::runApp('Projects/ushan')
shiny::runApp('Projects/ushan')
shiny::runApp('Projects/ushan')
library(shiny)
server <- function(input, output) {
userInput <- eventReactive(input$submit, input$text)
output$usertext <- renderUI( p(paste("User Input:", userInput())))
}
ui <- shinyUI(fluidPage(
sidebarLayout(
mainPanel(uiOutput("usertext")),
conditionalPanel(
condition = "input.submit == 0",
wellPanel(style = "position: absolute; width: 30%; left: 35%; top: 40%;
box-shadow: 10px 10px 15px grey;",
textInput("text", "Text Input:"),
actionButton("submit", "Submit"))
)
)
)
)
shinyApp(ui = ui, server = server)
shiny::runApp('Projects/ushan')
shiny::runApp('Projects/Grameen')
shiny::runApp('Projects/Grameen')
version
shiny::runApp('Projects/Grameen')
runApp('Projects/ushan')
runApp('Projects/Grameen')
shiny::runApp('Projects/Grameen')
shiny::runApp('Projects/Grameen')
runApp('t')
shinyApp(
ui = shinyUI(
fluidRow(
fileInput("file", label = h3("File input"), accept = c('xlsx'))
#  fileInput("myFile", "Choose a file", accept = c('xlsx'))
)
),
server = shinyServer(function(input, output,session){
observeEvent(input$myFile, {
inFile <- input$myFile
if (is.null(inFile))
return()
file.copy(inFile$datapath, file.path("~/Projects/Grameen/t2/t", inFile$name) )
})
})
)
library(shiny)
shinyApp(
ui = shinyUI(
fluidRow(
fileInput("file", label = h3("File input"), accept = c('xlsx'))
#  fileInput("myFile", "Choose a file", accept = c('xlsx'))
)
),
server = shinyServer(function(input, output,session){
observeEvent(input$myFile, {
inFile <- input$myFile
if (is.null(inFile))
return()
file.copy(inFile$datapath, file.path("~/Projects/Grameen/t2/t", inFile$name) )
})
})
)
library(shiny)
shinyApp(
ui = shinyUI(
fluidRow(
fileInput("file", label = h3("File input"), accept = c('.xlsx'))
#  fileInput("myFile", "Choose a file", accept = c('xlsx'))
)
),
server = shinyServer(function(input, output,session){
observeEvent(input$myFile, {
inFile <- input$myFile
if (is.null(inFile))
return()
file.copy(inFile$datapath, file.path("~/Projects/Grameen/t2/t", inFile$name) )
})
})
)
runApp('Projects/ushan')
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Run the app ----
shinyApp(ui, server)
runApp('Projects/ushan')
runApp('Projects/ushan')
runApp('Projects/ushan')
runApp('Projects/ushan')
runApp('Projects/ushan')
runApp('Projects/ushan')
install.packages("writexl")
install.packages("writexl")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
shiny::runApp('Projects/Grameen/t')
runApp('~/Projects/Grameen')
runApp('Projects/Grameen')
install.packages("shinyjs")
library("shinyjs", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
version
install.packages("installr")
shiny::runApp('Desktop/test 01')
install.packages("pdftools")
library(pdftools)
text <- pdf_text("71_PV.62.pdf")
a <- 10
typeof(a)
library(tabulizer)
library(stringr)
D_path = "/home/kpmg/Desktop/cclk_file/12/1"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
library(tabulizer)
library(stringr)
D_path = "/home/kpmg/Desktop/cclk_file/12/1"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
library(tabulizer)
library(stringr)
D_path = "/home/kpmg/Desktop/cclk_file/12/1.pdf"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
View(b)
library(tabulizer)
library(stringr)
D_path = "/home/kpmg/Desktop/cclk_file/12/2.pdf"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
View(b)
library(tabulizer)
library(stringr)
D_path = "/home/kpmg/Desktop/cclk_file/12/3.pdf"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
View(b)
library(tabulizer)
library(stringr)
D_path = "/home/kpmg/Desktop/cclk_file/12/4.pdf"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
View(b)
library(tabulizer)
library(stringr)
D_path = "/home/kpmg/Desktop/cclk_file/12/5.pdf"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
library(tabulizer)
library(stringr)
D_path = "/home/kpmg/Desktop/cclk_file/12/6.pdf"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
View(b)
D_path = "/home/kpmg/Desktop/cclk_file/12/1.pdf"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
View(b)
D_path = "/home/kpmg/Desktop/cclk_file/12/5.pdf"
# files = list.files(D_path)
# files
lst <- extract_tables(D_path, encoding="UTF-8")
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
D_path = "/home/kpmg/Desktop/cclk_file/12/5.pdf"
# files = list.files(D_path)
# files
#lst <- extract_tables(D_path, encoding="UTF-8")
lst <- extract_tables(D_path)
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
D_path = "/home/kpmg/Desktop/cclk_file/12/4.pdf"
# files = list.files(D_path)
# files
#lst <- extract_tables(D_path, encoding="UTF-8")
lst <- extract_tables(D_path)
a <- grep('Credit Facility for last 24',lst)
b <- as.data.frame(lst[[a[1]]])
b
View(b)
install.packages("C50")
library(C50)
library(C50)
data("iris")
head(iris)
library(C50)
data("iris")
head(iris)
str(iris)
table(iris$Species)
set.seed(9850)
g <- runif(nrow(iris))
irisr <- iris[order(g),]
str(irisr)
m1 <- C5.0(irisr[1:100,-5], irisr[1:100,5])
m1
summary(m1)
p <- predict(m1, irisr[101:150,])
table(irisr[101:150,5], Predicted = p)
plot(m1)
shiny::runApp('Projects/cclk')
shiny::runApp('Desktop/final_yr')
runApp('Desktop/final_yr')
runApp('Desktop/final_yr')
str(iris)
class(iris)
load("data_file.RData")
setwd("/home/kpmg/Desktop/final_yr/")
load("data_file.RData")
View(data_1)
class(data_1)
View(data_1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Projects/Grameen')
runApp('~/Desktop/t_19.R')
install.packages("ROracle")
runApp('~/Desktop/t_19.R')
runApp('~/Desktop/t_19.R')
install.packages("ROracle")
runApp('~/Desktop/t_19.R')
runApp()
runApp()
runApp()
runApp()
runApp()
print(ushan)
print('ushan')
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(DT)
### User Interface
ui <- shinyUI(fluidPage(
mainPanel(
fluidRow(
selectizeInput("selectInput",label ="Filter", choices= NULL, selected = NULL)
),
fluidRow(
DT::dataTableOutput("datamining_table")
)
)
)
)
server <- shinyServer(function(input, output,session){
myDataFrame <- data.frame(name =c("a","b","c"),
value = c(1,2,3))
updateSelectizeInput(session, 'selectInput', choices = c('a','b','c'), server = TRUE)
filterData <- reactive({
myDataFrame[which(myDataFrame$name == input$selectInput),]
})
output$datamining_table <- DT::renderDataTable({
DT::datatable(filterData(),selection="single",rownames = F)
})
})
shinyApp(ui = ui, server = server)
runApp('~/Desktop/t_19.R')
runApp()
class(data_1$Name_Of_disease)
str(data_1$Name_Of_disease)
data_1$Name_Of_disease
runApp()
