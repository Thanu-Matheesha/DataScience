ggsave(paste0("figure_",1,".pdf"), p)
for(i : levels(m$name)) {
p <- ggplot(subset(m, name==i), aes(variable, value,  fill = variable)) +
facet_wrap(~ name) +
geom_bar(stat="identity", show_guide=FALSE)
ggsave(paste0("figure_",i,".pdf"), p)
}
library(tidyr)
library(dplyr)
library(ggplot2)
Col0 <- c("AA", "BB", "CC", "DD","EE","FF")
Col1 <- c(2,2,2,6,1,1)
Col2 <- c(2,2,2,1,3,4)
Col3 <- c(2,2,3,4,6,6)
Col4 <- c(2,2,3,1,2,1)
Col5 <- c(2,1,1,1,1,4)
Col6 <- c(2,4,2,5,4,4)
Col7 <- c(2,4,2,5,4,4)
Col8 <- c(2,2,3,4,5,4)
Col9 <- c(1,3,3,2,2,2)
df<-data.frame(Col0,Col1,Col2,Col3,Col4,Col5,Col6,Col7,Col8,Col9)
df %>%
gather(Col, Val, -Col0) %>%
ggplot(aes(Col, Val, group = Col0, col = Col0)) +
geom_line() +
facet_grid(Col0 ~ .)
plotDat <- df %>%
gather(Col, Val, -Col0)%>%
split(Col0)
pdf("plots.pdf")
lapply(names(plotDat), function(i){
ggplot(plotDat[[i]], aes(Col, Val, group = Col0, col = Col0)) +
geom_line() +
ggtitle(paste("Plot", i))
})
dev.off()
View(plotDat)
View(plotDat[["AA"]])
plotDat[["AA"]]
class(plotDat)
View(df)
library(tidyr)
library(dplyr)
library(ggplot2)
Col0 <- c("AA", "BB", "CC", "DD","EE","FF")
Col1 <- c(2,2,2,6,1,1)
Col2 <- c(2,2,2,1,3,4)
Col3 <- c(2,2,3,4,6,6)
Col4 <- c(2,2,3,1,2,1)
Col5 <- c(2,1,1,1,1,4)
Col6 <- c(2,4,2,5,4,4)
Col7 <- c(2,4,2,5,4,4)
Col8 <- c(2,2,3,4,5,4)
Col9 <- c(1,3,3,2,2,2)
df<-data.frame(Col0,Col1,Col2,Col3,Col4,Col5,Col6,Col7,Col8,Col9)
View(df)
library(shiny)
library(shinydashboard)
library(plotly)
library(plyr)
library(dplyr)
library(DT)
library(readxl)
library(ggplot2)
library(plotrix)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
library(tidyr)
library(dplyr)
library(ggplot2)
Col0 <- c("AA", "BB", "CC", "DD","EE","FF")
Col1 <- c(2,2,2,6,1,1)
Col2 <- c(2,2,2,1,3,4)
Col3 <- c(2,2,3,4,6,6)
Col4 <- c(2,2,3,1,2,1)
Col5 <- c(2,1,1,1,1,4)
Col6 <- c(2,4,2,5,4,4)
Col7 <- c(2,4,2,5,4,4)
Col8 <- c(2,2,3,4,5,4)
Col9 <- c(1,3,3,2,2,2)
df<-data.frame(Col0,Col1,Col2,Col3,Col4,Col5,Col6,Col7,Col8,Col9)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
df %>%
gather(Col, Val, -Col0) %>%
ggplot(aes(Col, Val, group = Col0, col = Col0)) +
geom_line() +
facet_grid(Col0 ~ .)
plotDat <- df %>%
gather(Col, Val, -Col0)%>%
split(Col0)
plotDat <- df %>%
gather(Col, Val, -Col0)%>%
split(Col0)
runApp('KPMG/Commercial Credit')
plotDat[1]
plotDat[[1]]
df %>%
gather(Col, Val, -Col0) %>%
ggplot(aes(Col, Val, group = Col0, col = Col0)) +
geom_line() +
facet_grid(Col0 ~ .)
# split data for plotting
plotDat <- df %>%
gather(Col, Val, -Col0)%>%
split(Col0)
pdf("plots.pdf")
lapply(names(plotDat), function(i){
ggplot(plotDat[[i]], aes(Col, Val, group = Col0, col = Col0)) +
geom_line() +
ggtitle(paste("Plot", i))
})
dev.off()
df %>%
gather(Col, Val, -Col0) %>%
ggplot(aes(Col, Val, group = Col0, col = Col0)) +
geom_line() +
facet_grid(Col0 ~ .)
# split data for plotting
plotDat <- df %>%
gather(Col, Val, -Col0)%>%
split(Col0)
jpg("plots.jpg")
lapply(names(plotDat), function(i){
ggplot(plotDat[[i]], aes(Col, Val, group = Col0, col = Col0)) +
geom_line() +
ggtitle(paste("Plot", i))
})
dev.off()
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
View(df)
View(df)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
data <- df %>%
mutate(icon=ifelse(
df$Col2 < df$Col7,
as.character(icon("angle-up"), color = "red"),
as.character(icon("angle-down"))
)) %>% formatStyle(
'col2', 'col4',
backgroundColor = styleEqual(c(1,2), c('gray', 'yellow'))
)
View(df)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
colnames(df)
runApp('KPMG/Commercial Credit')
colnames(df) - c('A', 'B')
colnames(df) <- c('A', 'B')
Col0 <- c("AA", "BB", "CC", "DD","EE","FF")
Col1 <- c(2,2,2,6,1,1)
Col2 <- c(2,2,2,1,3,4)
Col3 <- c(2,2,3,4,6,6)
Col4 <- c(2,2,3,1,2,1)
Col5 <- c(2,1,1,1,1,4)
Col6 <- c(2,4,2,5,4,4)
Col7 <- c(2,4,2,5,4,4)
Col8 <- c(2,2,3,4,5,4)
Col9 <- c(1,3,3,2,2,2)
df<-data.frame(Col0,Col1,Col2,Col3,Col4,Col5,Col6,Col7,Col8,Col9)
data <- df %>%
mutate(icon=ifelse(
df$Col2 < df$Col7,
as.character(icon("angle-up")),
as.character(icon("angle-down"))
)) %>% formatStyle(
'Col1',
backgroundColor = styleEqual(c(2, 1), c('gray', 'yellow'))
)
library(DT)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
View(df)
View(df)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
data <- df %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
mutate(icon=ifelse(
df$V2 < df$V3,
as.character(icon("angle-up")),
as.character(icon("angle-down"))
))
data <- df %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
) %>%  mutate(icon=ifelse(
df$V2 < df$V3,
as.character(icon("angle-up")),
as.character(icon("angle-down"))
))
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>%  mutate(icon=ifelse(
df$V2 < df$V3,
as.character(icon("angle-up")),
as.character(icon("angle-down"))
))
View(df)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
df <- head(mtcars,100)
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
datatable(
df,
options = list(
rowCallback=JS(paste0("function(row, data) {",
paste(lapply(1:ncol(df),function(i){
paste0("var value=Math.abs(data[",i,"]);
var value2=data[",i,"];
if (value!==null){
if(value2<0){
$(this.api().cell(row,",i,").node()).css({'background':isNaN(parseFloat(value)) || value <=",r0," ? '' : 'linear-gradient(90deg, transparent ' + (",r1," - value)/",rr," * 100 + '%, red ' + (",r1," - value)/",rr," * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});
}else{
$(this.api().cell(row,",i,").node()).css({'background':isNaN(parseFloat(value)) || value <=",r0," ? '' : 'linear-gradient(90deg, transparent ' + (",r1," - value)/",rr," * 100 + '%, lightblue ' + (",r1," - value)/",rr," * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});
}
} ")
}),collapse="\n"),
"}"))
)
)
library(shiny)
library(shinydashboard)
library(plotly)
library(plyr)
library(dplyr)
library(DT)
library(readxl)
library(ggplot2)
library(plotrix)
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
datatable(
df,
options = list(
rowCallback=JS(paste0("function(row, data) {",
paste(lapply(1:ncol(df),function(i){
paste0("var value=Math.abs(data[",i,"]);
var value2=data[",i,"];
if (value!==null){
if(value2<0){
$(this.api().cell(row,",i,").node()).css({'background':isNaN(parseFloat(value)) || value <=",r0," ? '' : 'linear-gradient(90deg, transparent ' + (",r1," - value)/",rr," * 100 + '%, red ' + (",r1," - value)/",rr," * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});
}else{
$(this.api().cell(row,",i,").node()).css({'background':isNaN(parseFloat(value)) || value <=",r0," ? '' : 'linear-gradient(90deg, transparent ' + (",r1," - value)/",rr," * 100 + '%, lightblue ' + (",r1," - value)/",rr," * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});
}
} ")
}),collapse="\n"),
"}"))
)
)
data <- data.frame(a=c(rep("a",9)),value=c(-4,-3,-2,-1,0,1,2,3,4))
datatable(data) %>%
formatStyle('value',
background=color_from_middle(data$value,'red','blue'))
data <- data.frame(a=c(rep("a",9)),value=c(-4,-3,-2,-1,0,1,2,3,4))
color_from_middle <- function (data, color1,color2)
{
max_val=max(abs(data))
JS(sprintf("isNaN(parseFloat(value)) || value < 0 ? 'linear-gradient(90deg, transparent, transparent ' + (50 + value/%s * 50) + '%%, %s ' + (50 + value/%s * 50) + '%%,%s  50%%,transparent 50%%)': 'linear-gradient(90deg, transparent, transparent 50%%, %s 50%%, %s ' + (50 + value/%s * 50) + '%%, transparent ' + (50 + value/%s * 50) + '%%)'",
max_val,color1,max_val,color1,color2,color2,max_val,max_val))
}
datatable(data) %>%
formatStyle('value',
background=color_from_middle(data$value,'red','blue'))
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
View(df)
r2=range(abs(df))[3]
runApp('KPMG/Commercial Credit')
rrr=range(abs(df))[3]-range(abs(df))[2]
View(df)
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
View(df)
View(df)
df = data.frame(a=c(rep("a",9)),value=c(-4,-3,-2,-1,0,1,2,3,4))
View(df)
runApp('KPMG/Commercial Credit')
View(df)
View(df)
runApp('KPMG/Commercial Credit')
rrr=range(abs(df))[3]-range(abs(df))[2]
rr=range(abs(df))[2]-range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)
)
)
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
rr=range(abs(df))[2]-range(abs(df))[1]
rr
r1=range(abs(df))[2]
r0=range(abs(df))[1]
rr=range(abs(df))[3]-range(abs(df))[2]
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
df[2]
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
sss=datatable(df) %>% formatStyle(names(df),
background = styleColorBar(range(df), 'lightblue'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')
sss$x$options$rowCallback
View(sss)
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Dashboard Codes/Reactive vs Observer')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Pharma_Dashboard')
shiny::runApp('KPMG/Dashboard/Waste')
runApp('~/KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
setwd("~/KPMG/Dashboard/Ushan/final_yr/")
load("data_file.RData")
View(data_1)
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("lpSolve")
install.packages("lpSolveAPI")
#############################################################
library(lpSolve) #Loading lpSolve library
obj.fun=c(5000,-2000) #Loading the objective function in obj.fun
constr=matrix(c(1,1,1,0,0,1),ncol = 2, byrow = TRUE) #Loading the constraints
constr.dir=c("=",">=",">=")
constr.rhs=c(200,80,100)
View(constr)
mod=lp("max",obj.fun,constr,constr.dir,constr.rhs,compute.sens = TRUE) #Using lp() to solve our problem
mod$solution #Displaying the values of x and y
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp()
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
install.packages("XLConnect")
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
library(XLConnectJars)
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Observe vs Reactive')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Pharma_Dashboard')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Labor')
