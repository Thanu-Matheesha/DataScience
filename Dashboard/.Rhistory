setwd("D:/KPMG/aab/Screenline")
#......................Sales ABC analysis (Based on qty)........................
setwd("D:/KPMG/aab/Screenline")
library(ABCanalysis)
library(openxlsx)
library(plyr)
reate the data for the chart.
#reate the data for the chart.
v <- c(7,12,28,3,41)
# Give the chart file a name.
png(file = "line_chart.jpg")
# Plot the bar chart.
plot(v,type = "o")
# Save the file.
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Create the data frame.
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
View(emp.data)
View(emp.data)
emp.data$dept <- c("IT","Operations","IT","HR","Finance")
v <- emp.data
View(v)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(births2006.smpl)
dim(births2006.smpl)
births.dow=table(births2006.smpl$DOB_WK)
births.dow
barchart(births.dow,ylab="Day of Week",col="black")
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
+ MM=births2006.smpl$DMETH_REC)
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,+ MM=births2006.smpl$DMETH_REC)
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK)
dob.dm.tbl
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
+ MM=births2006.smpl$DMETH_REC)
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK
+ MM=births2006.smpl$DMETH_REC)
dob.dm.tbl=table(WK = births2006.smpl$DOB_WK,
+ MM = births2006.smpl$DMETH_REC)
dob.dm.tbl=table(MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl2=dob.dm.tbl+births.dow
dob.dm.tbl=table(WK=births2006.smpl$DOB_WK,
+ MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl,ylab="Day of Week")
barchart(dob.dm.tbl,horizontal=FALSE,groups=FALSE,
+ xlab="Day of Week",col="black")
www.
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("tidyverse")
install.packages("scales")
library(tidyverse)
library(ggplot2)
library(lubridate)
library(tidyr)
library(scales)
set.seed(1)
install.packages("dslabs")
library(dslabs)
data("trump_tweets")
url <- 'http://www.trumptwitterarchive.com/data/realdonaldtrump/%s.json'
trump_tweets <- map(2009:2017, ~sprintf(url, .x)) %>%
map_df(jsonlite::fromJSON, simplifyDataFrame = TRUE) %>%
filter(!is_retweet & !str_detect(text, '^"')) %>%
mutate(created_at = parse_date_time(created_at, orders = "a b! d! H!:M!:S! z!* Y!", tz="EST"))
>url <- 'http://www.trumptwitterarchive.com/data/realdonaldtrump/%s.json'
trump_tweets <- map(2009:2017, ~sprintf(url, .x)) %>%
map_df(jsonlite::fromJSON, simplifyDataFrame = TRUE) %>%
filter(!is_retweet & !str_detect(text, '^"')) %>%
mutate(created_at = parse_date_time(created_at, orders = "a b! d! H!:M!:S! z!* Y!", tz="EST"))
url <- 'http://www.trumptwitterarchive.com/data/realdonaldtrump/%s.json'
trump_tweets <- map(2009:2017, ~sprintf(url, .x)) %>%
map_df(jsonlite::fromJSON, simplifyDataFrame = TRUE) %>%
filter(!is_retweet & !str_detect(text, '^"')) %>%
mutate(created_at = parse_date_time(created_at, orders = "a b! d! H!:M!:S! z!* Y!", tz="EST"))
View(trump_tweets)
head(trump_tweets)
names(trump_tweets)
trump_tweets %>% select(text) %>% head
trump_tweets %>% count(source) %>% arrange(desc(n))
x <- c(4, "a", TRUE)
class(x)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y <- x-3
y
z <-c(1.1, 9, 3.14)
?c
z
c(z,555)
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
library(swirl)
swirl()
colmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
install.packages("zoo")
library(swirl)
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5!==7
5!=7
5 !== 7
5 ==! 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(which(ints<0))
any(ints<0)
all(ints>0)
Sys.Date()
x<- c(2, 4, 5)
mean(c(2, 4, 5))
x
boring_function <- function(x) {
x
}
submit(boring_function)
submit()
#x
}
boring_function <- function(x) {
x
}
x
submit()
View(boring_function)
View(boring_function)
boring_function <- function(x) {
x
}
submit()
?
?
submit()
boring_function <- function(x) {
x
}
submit(boring_function)
submit()
View(boring_function)
submit()
skip()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
my_vector
}
submit()
skip()
my_mean(boring_function)
skip()
skip()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num =5)
remainder(4, div = 2)
args(remainder)
skip()
View(evaluate)
View(evaluate)
args(evaluate)
skip()
evaluate(function(x){x+1}, 6)
skip()
skip()
?paste
paste("Programming", "is", "fun!")
skip()
telegram()
skip()
mad_libs()
skip()
skip()
install.packages("tseries")
install.packages("forecast")
setwd("~/KMPG/POS/Total")
setwd("~/KMPG/POS/Total")
setwd("~/KMPG/POS/Total")
setwd("~/POS/Supermart")
setwd("~/KMPG/POS/Total")
getwd()
head(lynx)
# extracting time stamps
time(lynx)
# how longs is the dataset?
length(lynx)
mean(lynx); median(lynx)
plot(lynx)
sort(lynx)
# packing it into a quarterly time series
mytimeseries = ts(data = mydata, start = c(1956,3), frequency = 4)
# random uniform data between 10 and 45
mydata = runif(n = 50, min = 10, max = 45)
# packing it into a quarterly time series
mytimeseries = ts(data = mydata, start = c(1956,3), frequency = 4)
plot(mytimeseries)
class(mytimeseries)
class(lynx)
auto.arima(mytimeseries)
auto.arima(mytimeseries, trace = T)
myar = auto.arima(mytimeseries, stepwise = F, approximation = F)
plot(forecast(myar, h = 3))
## Time Series Vectors and Lags
library(forecast)
## ARIMA
auto.arima(mytimeseries)
auto.arima(mytimeseries, trace = T)
myar = auto.arima(mytimeseries, stepwise = F, approximation = F)
plot(forecast(myar, h = 3))
# Using function ets
etsmodel = ets(mytimeseries); etsmodel
# Plotting the model vs original
plot(mytimeseries, lwd = 3)
lines(etsmodel$fitted, col = "red")
# Plotting the forecast
plot(forecast(etsmodel, h = 12))
# Changing the prediction interval
plot(forecast(etsmodel, h = 12, level = 95))
library(faraway)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
?hts
??hts
??hts
bts <- ts(5 + matrix(sort(rnorm(500)), ncol=5, nrow=100))
View(bts)
install.packages("hts")
library(hts)
y <- hts(bts, nodes=list(2, c(3, 2)))
View(y)
# Returns all series in the hierarchy
ally <- aggts(y)
View(ally)
# Returns time series at levels 0 and 2
somey <- aggts(y, levels = c(0, 2))
View(somey)
# Returns the summing matrix
S <- smatrix(y)
View(S)
# Graph
plot(y, levels = c(0, 1))
qq <-  forecast(y, h=10, method="bu")
View(qq)
plot(qq, include=10)
qq <-  auto.arima(y, h=10, method="bu")
# forecast
as.numeric(unlist(y))
qq <-  auto.arima(y, h=10, method="bu")
y <- hts(bts, nodes=list(2, c(3, 2)))
class(y)
class(bts)
time(y)
# forecast
ts <- ts(bts, start = c(2015, 01), frequency = 12)
View(ts)
time(ts)
qq <-  auto.arima(ts, h=10, method="bu")
qq <-  auto.arima(ts, h=10)
y = hts(ts, characters = c(0, 1))
y = hts(ts, characters = c(0, 2))
y = hts(ts, characters = c(3,2))
# forecast
fcasts <- forecast(hts, h = 10, method = "comb", fmethod = "arima",
weights = "sd", keep.fitted = TRUE, parallel = TRUE)
# forecast
fcasts <- forecast(y, h = 10, method = "comb", fmethod = "arima",
weights = "sd", keep.fitted = TRUE, parallel = TRUE)
# forecast
fcasts <- forecast(y, h = 10, method = "comb", fmethod = "arima",
weights = "sd", keep.fitted = TRUE, parallel = TRUE, unlist(sapply(ally, t)), nrow = nrow(y$bts)))
# forecast
fcasts <- forecast(y, h = 10, method = "comb", fmethod = "arima",
weights = "sd", keep.fitted = TRUE, parallel = TRUE, unlist(sapply(ally, t)), nrow = nrow(y$bts))
y, h = 10, method = "comb", fmethod = "arima",
weights = "sd", keep.fitted = TRUE, parallel = TRUE)
install.packages("addb")
allts_infant <- allts(y)
library(hts)
bts <- ts(5 + matrix(sort(rnorm(500)), ncol=5, nrow=100))
y <- hts(bts, nodes=list(2, c(3, 2)))
# Returns all series in the hierarchy
ally <- aggts(y)
# Returns time series at levels 0 and 2
somey <- aggts(y, levels = c(0, 2))
# Returns the summing matrix
S <- smatrix(y)
# Graph
plot(y, levels = c(0, 1))
allts_infant <- allts(y)
allf <- matrix(, nrow=10, ncol=ncol(allts_infant))
View(allts_infant)
View(allts_infant)
allf <- ts(allf, start=2004)
View(allf)
for(i in 1:ncol(allts_infant))
allf[,i] <- forecast(auto.arima(allts_infant[,i]), h=10)$mean
allf <- ts(allf)
View(allf)
View(allts_infant)
View(allf)
View(allts_infant)
View(allf)
View(allts_infant)
View(allf)
y.f <- combinef(allf, Smatrix(infantgts))
y.f <- combinef(allf, Smatrix(y))
y.f <- combinef(allf, Smatrix(y))
install.packages("Matrix")
library(hts)
library(Matrix)
bts <- ts(5 + matrix(sort(rnorm(500)), ncol=5, nrow=100))
y <- hts(bts, nodes=list(2, c(3, 2)))
# Returns all series in the hierarchy
ally <- aggts(y)
# Returns time series at levels 0 and 2
somey <- aggts(y, levels = c(0, 2))
# Returns the summing matrix
S <- smatrix(y)
# Graph
plot(y, levels = c(0, 1))
allts_infant <- allts(y)
allf <- matrix(, nrow=10, ncol=ncol(allts_infant))
for(i in 1:ncol(allts_infant))
allf[,i] <- forecast(auto.arima(allts_infant[,i]), h=10)$mean
allf <- ts(allf)
y.f <- combinef(allf, Smatrix(y))
y.f <- combinef(allf, matrix(y))
y.f <- combinef(allf, smatrix(allts))
class(y)
y.f <- combinef(allf, smatrix(y))
allf <- ts(allf)
View(allf)
y.f <- combinef(allf, smatrix(y))
allf <- matrix(, nrow=10, ncol=ncol(allts_infant))
y.f <- combinef(allf, smatrix(y))
allts_infant <- allts(y)
allf <- matrix(, nrow=10, ncol=ncol(allts_infant))
for(i in 1:ncol(allts_infant))
allf[,i] <- forecast(auto.arima(allts_infant[,i]), h=10)$mean
allf <- ts(allf)
View(allf)
View(allts_infant)
yqq <- combinef(allf, smatrix(y))
allf <- matrix( nrow=10, ncol=ncol(allts_infant))
library(hts)
library(Matrix)
bts <- ts(5 + matrix(sort(rnorm(500)), ncol=5, nrow=100))
y <- hts(bts, nodes=list(2, c(3, 2)))
# Returns all series in the hierarchy
ally <- aggts(y)
View(ally)
View(ally)
View(ally)
View(ally)
View(ally)
# Returns time series at levels 0 and 2
somey <- aggts(y, levels = c(0, 2))
# Returns the summing matrix
S <- smatrix(y)
# Graph
plot(y, levels = c(0, 1))
allts_infant <- allts(y)
allf <- matrix( nrow=10, ncol=ncol(allts_infant))
for(i in 1:ncol(allts_infant))
allf[,i] <- forecast(auto.arima(allts_infant[,i]), h=10)$mean
allf <- ts(allf)
y.f <- combinef(allf, get_nodes(y), weights = NULL, keep = "gts", algorithms = "lu")
View(y.f)
y.ff <- as.data.frame(y.f)
plot(y.f)
g <- rbind(c(1,1,2,2), c(1,2,1,2))
y <- gts(abc, groups = g)
h <- 12
y <- gts(g, groups = g)
View(y)
ally <- aggts(y)
View(ally)
allf <- matrix(NA,nrow = h,ncol = ncol(ally))
for(i in 1:ncol(ally))
allf[,i] <- forecast(auto.arima(ally[,i]),h = h)$mean
allf <- ts(allf, start = 51)
y.f <- combinef(allf, groups = get_groups(y), keep ="gts", algorithms = "lu")
plot(y.f
plot(y.f
)
plot(y.f)
library(hts)
library(Matrix)
bts <- ts(5 + matrix(sort(rnorm(500)), ncol=5, nrow=100))
y <- hts(bts, nodes=list(2, c(3, 2)))
# Returns all series in the hierarchy
ally <- aggts(y)
# Returns time series at levels 0 and 2
somey <- aggts(y, levels = c(0, 2))
# Returns the summing matrix
S <- smatrix(y)
# Graph
plot(y, levels = c(0, 1))
shiny::runApp('KPMG/Chamil/BestBuy')
shiny::runApp('KPMG/Chamil/BestBuy')
shiny::runApp('KPMG/Chamil/BestBuy')
?set.seed
set.seed(7)
x <- c(sample(1:4, 10), sample(1:10, 15, replace = T))
x <- c(sample(1:4, 10), sample(1:10, 15, replace = F))
x <- c(sample(1:4, 4), sample(1:10, 15, replace = T))
x
x <- c(sample(1:4, 4), sample(1:4, 15, replace = T))
x
print("ග්රාම සේවක වසම:")
print("ග්රාම නිලධාරි")
<h1>ushan</h1>
<h1>"ushan"</h1>
print("අඩො")
print("ග්රාම සේවා")
print("දිස්ත්රික්කයවා")
print("ග්රා")
print("දිස්ත්්කයරා")
print("දිස්ත්රික්කයයරා")
print("දිස්ත් රික්කයකයයරා")
HTML"<head>දිස්ත්රික්කය</head>"
HTML"<head>දිස්ත්රික්කය</head>"
HTML("<head>දිස්ත්රික්කය</head>"
)
HTML("<strong>Raw HTML!</strong>")
install.packages("R2HTML")
library(R2HTML)
HTML("<strong>Raw HTML!</strong>")
tags$h1("My header")
shiny::tags
tags$h1("My header")
tagList(tags$h1("Title"),
tags$h2("Header text"),
tags$p("Text here"))
install.packages("htmltools")
library(htmltools)
library(htmltools)
install.packages("htmltools")
library(htmltools)
tagList(tags$h1("Title"),
tags$h2("Header text"),
tags$p("Text here"))
tags$h1("My header")
print(tags$h1("My header"))
print(tags$h1("දිස්ත්රික්කය"))
tags$h1("දිස්ත්රික්කය")
shiny::runApp('KPMG/Chamil/BestBuy')
runApp('KPMG/Chamil/BestBuy')
tags$h1("My header")
runApp('KPMG/Chamil/BestBuy')
runApp('KPMG/Chamil/BestBuy')
runApp('KPMG/Chamil/BestBuy')
runApp('KPMG/Chamil/BestBuy')
train <- window(auscafe, end=c(2012,9))
install.packages("auscafe")
shiny::runApp('KPMG/Dashboard')
