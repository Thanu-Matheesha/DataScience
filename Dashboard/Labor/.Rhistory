$(this.api().cell(row,",i,").node()).css({'background':isNaN(parseFloat(value)) || value <=",r0," ? '' : 'linear-gradient(90deg, transparent ' + (",r1," - value)/",rr," * 100 + '%, lightblue ' + (",r1," - value)/",rr," * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});
}
} ")
}),collapse="\n"),
"}"))
)
)
data <- data.frame(a=c(rep("a",9)),value=c(-4,-3,-2,-1,0,1,2,3,4))
datatable(data) %>%
formatStyle('value',
background=color_from_middle(data$value,'red','blue'))
data <- data.frame(a=c(rep("a",9)),value=c(-4,-3,-2,-1,0,1,2,3,4))
color_from_middle <- function (data, color1,color2)
{
max_val=max(abs(data))
JS(sprintf("isNaN(parseFloat(value)) || value < 0 ? 'linear-gradient(90deg, transparent, transparent ' + (50 + value/%s * 50) + '%%, %s ' + (50 + value/%s * 50) + '%%,%s  50%%,transparent 50%%)': 'linear-gradient(90deg, transparent, transparent 50%%, %s 50%%, %s ' + (50 + value/%s * 50) + '%%, transparent ' + (50 + value/%s * 50) + '%%)'",
max_val,color1,max_val,color1,color2,color2,max_val,max_val))
}
datatable(data) %>%
formatStyle('value',
background=color_from_middle(data$value,'red','blue'))
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
View(df)
r2=range(abs(df))[3]
runApp('KPMG/Commercial Credit')
rrr=range(abs(df))[3]-range(abs(df))[2]
View(df)
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
View(df)
runApp('KPMG/Commercial Credit')
View(df)
View(df)
df = data.frame(a=c(rep("a",9)),value=c(-4,-3,-2,-1,0,1,2,3,4))
View(df)
runApp('KPMG/Commercial Credit')
View(df)
View(df)
runApp('KPMG/Commercial Credit')
rrr=range(abs(df))[3]-range(abs(df))[2]
rr=range(abs(df))[2]-range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)
)
)
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:3, 10, TRUE)))
View(df)
rr=range(abs(df))[2]-range(abs(df))[1]
rr
r1=range(abs(df))[2]
r0=range(abs(df))[1]
rr=range(abs(df))[3]-range(abs(df))[2]
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
df[2]
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
df = as.data.frame(cbind(matrix(round(runif(50, -1, 1), 3), 10), sample(0:1, 10, TRUE)))
rr=range(abs(df))[2]-range(abs(df))[1]
r1=range(abs(df))[2]
r0=range(abs(df))[1]
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
sss=datatable(df) %>% formatStyle(names(df),
background = styleColorBar(range(df), 'lightblue'),
backgroundSize = '98% 88%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center')
sss$x$options$rowCallback
View(sss)
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Dashboard Codes/Reactive vs Observer')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Pharma_Dashboard')
shiny::runApp('KPMG/Dashboard/Waste')
runApp('~/KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
install.packages("ROI")
install.packages("ompr.roi")
install.packages("ompr")
install.packages("ROI.plugin.glpk")
runApp('KPMG/Dashboard/Labor')
n <- 40
m <- 4
capacity <- rep.int(11, m) # all have equal capacities
set.seed(1234)
preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
preferences <- function(student) preference_data[[student]]
# the weight of a student choosing a course
# if the course is not among the preferences, the weight is -100000
weight <- function(student, course) {
p <- which(as.numeric(course) == preferences(as.numeric(student)))
as.integer(if (length(p) == 0) {
-100000
} else {
p
})
}
weight(1, 3)
weight(1, 23)
library(ompr)
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m)) %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to one course
add_constraint(sum_expr(x[i, j], j = 1:m) == 1, i = 1:n)
View(model)
library(ompr.roi)
library(ROI.plugin.glpk)
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
matching <- result %>%
get_solution(x[i,j]) %>%
filter(value > .9) %>%
select(i, j) %>%
rowwise() %>%
mutate(weight = weight(as.numeric(i), as.numeric(j)),
preferences = paste0(preferences(as.numeric(i)), collapse = ",")) %>% ungroup
View(matching)
head(matching)
runApp('C:/KPMG_1/MOIC/moic')
runApp('KPMG/Dashboard/Labor')
my_var <- 5
data <-6
my_var+data
new_var<- my_var+data
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
porker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
porker_vector
days_vector
names(porker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(porker_vector)<-c days_vector
names(porker_vector)<-days_vector
porker_vector
names(roulette_vector)<-days_vector
roulette_vector
porker_vector
Total_vector<-porker_vector+roulette_vector
Total_vector
Total_porker<-sum(porker_vector)
Total_porker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_porker+Total_roulette
Total_week
Total_week<-Total_porker+Total_roulette
Total_week
Total_porker<Total_roulette
days_vector[2]
poker_wednesday <- days_vector[3]
poker_wednesday
porker_vector
poker_wednesday <- poker_vector[3]
poker_wednesday <- porker_vector[3]
poker_wednesday
poker_midweek<- poker_vector[c(2,3,4)]
poker_midweek<-poker_vector[c(2,3,4)]
poker_vector<-c(140,-50,20,-120,240)
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[1:4]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-pokervector>0
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
porker_vector[selection_vector]
poker_vector<-c(140,-50,20,-120,240)
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
porker_vector[selection_vector]
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
selection_vector<-poker_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
roulette_vector[selection_vector]
selection_vector1<-roulette_vector >0
selection_vector1
roulette_vector[selection_vector1]
matrix1<-matrix(1:9,byrow = TRUE,nrow = 3)
matrix1
shiny::runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
setwd("~/KPMG/Dashboard/Labor")
library(plotly)
library(dplyr)
library(DT)
library(readxl)
Df <- read_xlsx('Lab_2.xlsx')
Df$Day <- as.numeric(as.factor(Df$Day))
Df$Shift <- as.numeric(as.factor(Df$Shift))
Day <- length(unique(Df$Day))
shift <- length(unique(Df$Shift))
Product <- length(unique(Df$Product))
Machine <- length(unique(Df$Machine))
labor <- length(Df[5:9])
score <- function(day, shi, mac, pro, lab) {
out <- Df[Df$Day==day & Df$Shift==shi & Df$Machine==mac & Df$Product==pro,][lab]
out1 <- out[is.na(out)] <- 0
print(as.integer(out1))
}
View(Df)
score(2,5,3,2,7)
score <- function(day, shi, mac, pro, lab) {
out <- Df[Df$Day==day & Df$Shift==shi & Df$Machine==mac & Df$Product==pro,][lab]
# out1 <- out[is.na(out)] <- 0
print(as.integer(out))
}
score(2,5,3,2,7)
score(1,1,1,1,1)
score <- function(day, shi, mac, pro, lab) {
out <- Df[Df$Day==day & Df$Shift==shi & Df$Machine==mac & Df$Product==pro,][lab]
# out1 <- out[is.na(out)] <- 0
print(as.numeric(out))
}
score(2,5,3,2,7)
score <- function(day, shi, mac, pro, lab) {
out <- Df[Df$Day==day & Df$Shift==shi & Df$Machine==mac & Df$Product==pro,][lab]
out1 <- out[is.na(out)] <- 0
print(as.numeric(out1))
}
score(2,5,3,2,7)
score <- function(day, shi, mac, pro, lab) {
out <- Df[Df$Day==day & Df$Shift==shi & Df$Machine==mac & Df$Product==pro,][lab]
out1 <- ifelse(as.numeric(out)==NA, 0, out)
print(out1)
}
score(2,5,3,2,7)
score <- function(day, shi, mac, pro, lab) {
out <- Df[Df$Day==day & Df$Shift==shi & Df$Machine==mac & Df$Product==pro,][lab]
out1 <- ifelse(as.numeric(out)==NA, 0, as.numeric(out))
print(out1)
}
score(2,5,3,2,7)
score <- function(day, shi, mac, pro, lab) {
out <- Df[Df$Day==day & Df$Shift==shi & Df$Machine==mac & Df$Product==pro,][lab]
out1 <- ifelse(is.na(as.numeric(out)), 0, as.numeric(out))
print(out1)
}
score(2,5,3,2,7)
score(1,1,1,1,1)
score <- function(day, shi, mac, pro, lab) {
out <- Df[Df$Day==day & Df$Shift==shi & Df$Machine==mac & Df$Product==pro,][lab]
out1 <- ifelse(is.na(as.numeric(out)), 0, as.numeric(out))
print(out1)
}
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
model <- MIPModel() %>%
add_variable(x[i, j, k, l, m], i = 1: Day, j = 1:shift, k = 1:Machine, l=1:Product, m=5:9 , type = "binary") %>%
set_objective(sum_expr(score(i, j, k, l, m) * x[i, j, k, l, m], i = 1: Day, j = 1:shift, k = 1:Machine, l=1:Product, m=5:9)) %>%
add_constraint(sum_expr(x[i, j, k, l, m], j = 1:shift) <= 1, i = 1: Day, k = 1:Machine, l=1:Product, m=5:9) %>%
add_constraint(sum_expr(x[i,j,k, l, m], i = 1: Day) <= 1, j = 1:shift, k = 1:Machine, l=1:Product, m=5:9) %>%
add_constraint(sum_expr(x[i,j,k, l, m], m=5:9) <= 1, i = 1: Day, j = 1:shift, k = 1:Machine, l=1:Product) %>%
add_constraint(sum_expr(x[i,j,k, l, m], l=1:Product) <= 1, i = 1: Day, j = 1:shift, k = 1:Machine, m=5:9) %>%
add_constraint(sum_expr(x[i,j,k, l, m], k = 1:Machine) <= 1, i = 1: Day, j = 1:shift, l=1:Product, m=5:9)
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
View(result)
matching <- result %>%
get_solution(x[i,j,k,l,m]) %>%
filter(value > .9) %>%
select(i, j, k, l, m) %>%
rowwise() %>%
mutate(score = score(as.numeric(i), as.numeric(j), as.numeric(k), as.numeric(l), as.numeric(m)))
View(matching)
View(Df)
