runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Commercial Credit')
shiny::runApp('KPMG/Pharma_Dashboard')
shiny::runApp('KPMG/Dashboard/Waste')
runApp('~/KPMG/Commercial Credit')
shiny::runApp('KPMG/Commercial Credit')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('~/KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
runApp('KPMG/Dashboard/Ushan/final_yr')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
install.packages("ROI")
install.packages("ompr.roi")
install.packages("ompr")
install.packages("ROI.plugin.glpk")
runApp('KPMG/Dashboard/Labor')
n <- 40
m <- 4
capacity <- rep.int(11, m) # all have equal capacities
set.seed(1234)
preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
preferences <- function(student) preference_data[[student]]
# the weight of a student choosing a course
# if the course is not among the preferences, the weight is -100000
weight <- function(student, course) {
p <- which(as.numeric(course) == preferences(as.numeric(student)))
as.integer(if (length(p) == 0) {
-100000
} else {
p
})
}
weight(1, 3)
weight(1, 23)
library(ompr)
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m)) %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to one course
add_constraint(sum_expr(x[i, j], j = 1:m) == 1, i = 1:n)
View(model)
library(ompr.roi)
library(ROI.plugin.glpk)
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
matching <- result %>%
get_solution(x[i,j]) %>%
filter(value > .9) %>%
select(i, j) %>%
rowwise() %>%
mutate(weight = weight(as.numeric(i), as.numeric(j)),
preferences = paste0(preferences(as.numeric(i)), collapse = ",")) %>% ungroup
View(matching)
head(matching)
runApp('C:/KPMG_1/MOIC/moic')
runApp('KPMG/Dashboard/Labor')
my_var <- 5
data <-6
my_var+data
new_var<- my_var+data
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
porker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
porker_vector
days_vector
names(porker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(porker_vector)<-c days_vector
names(porker_vector)<-days_vector
porker_vector
names(roulette_vector)<-days_vector
roulette_vector
porker_vector
Total_vector<-porker_vector+roulette_vector
Total_vector
Total_porker<-sum(porker_vector)
Total_porker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_porker+Total_roulette
Total_week
Total_week<-Total_porker+Total_roulette
Total_week
Total_porker<Total_roulette
days_vector[2]
poker_wednesday <- days_vector[3]
poker_wednesday
porker_vector
poker_wednesday <- poker_vector[3]
poker_wednesday <- porker_vector[3]
poker_wednesday
poker_midweek<- poker_vector[c(2,3,4)]
poker_midweek<-poker_vector[c(2,3,4)]
poker_vector<-c(140,-50,20,-120,240)
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[1:4]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-pokervector>0
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
porker_vector[selection_vector]
poker_vector<-c(140,-50,20,-120,240)
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
porker_vector[selection_vector]
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
selection_vector<-poker_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
roulette_vector[selection_vector]
selection_vector1<-roulette_vector >0
selection_vector1
roulette_vector[selection_vector1]
matrix1<-matrix(1:9,byrow = TRUE,nrow = 3)
matrix1
shiny::runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
setwd("~/KPMG/Dashboard/Labor")
library(plotly)
library(plyr)
library(dplyr)
library(DT)
library(readxl)
# tab_names <- excel_sheets(path = xl_data)
#
# ####################################################################################
# list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
# # df <- data.frame(matrix(unlist(list_all), nrow=5, byrow=T),stringsAsFactors=FALSE)
# df1 <- do.call(rbind.data.frame, list_all)
# df1$people <- excel_sheets(xl_data)
# list_all <- lapply(list_all, function(x) x[-1,-1])
# pre <- function(student) list_all[[student]]
# pre(1)
mysheets_fromexcel <- list()
mysheetlist <- excel_sheets(path="Labor.xlsx")
i=1
for (i in 1:length(mysheetlist)){
tempdf <- read_excel(path="Labor.xlsx", sheet = mysheetlist[i])
tempdf$sheetname <- mysheetlist[i]
mysheets_fromexcel[[i]] <- tempdf
}
df1 <- do.call(rbind.data.frame, mysheets_fromexcel)
View(df1)
View(df1)
####################################################################################################
shifft <- nrow(unique(df1$Shift))
####################################################################################################
shifft <- length(unique(df1$Shift))
View(df1)
labor <- length(unique(df1$sheetname))
day1 <- max(ncol(df1))
score <- function(labor, shifft, day1) {
out <- df1[df1$sheetname==labor & df1$Shift==shifft,][day1]
print(as.integer(out))
}
score(2,2,2)
score <- function(laborr, shiffft, day) {
out <- df1[df1$sheetname==labor & df1$Shift==shifft,][day]
print(as.integer(out))
}
score(2,2,2)
score <- function(laborr, shiffft, day) {
out <- df1[df1$sheetname==laborr & df1$Shift==shiffft,][day]
print(as.integer(out))
}
score(2,2,2)
View(df1)
View(df1)
day1 <- ncol(df1[2:8])
#   as.integer(if (length(p) == 0) {
#     -100000
#   } else {
#     p
#   })
# }
#
# # weightt(1,1)
#initialize readin listing
###################################################################################
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
model <- MIPModel() %>%
# 1 iff labor i is assigned to shift j in k day
add_variable(x[i, j, k], i = 1: labor, j = 1:shifft, k = 1:day1, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(score(i, j, k) * x[i, j, k], i = 1:labor, j =1:shifft, k = 1:day1)) %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j, k], j =1:shifft, k = 1:day1) == 1, i = 1:labor)  %>%
add_constraint(sum_expr(x[i,j,k], i = 1:labor, k = 1:day1) <= 1, j = 1:shifft)
runApp('Labor 2')
runApp('Labor 2')
shiny::runApp('Labor 2')
runApp('Labor 2')
setwd("~/KPMG/Dashboard/Labor")
library(plotly)
library(plyr)
library(dplyr)
library(DT)
library(readxl)
# tab_names <- excel_sheets(path = xl_data)
#
# ####################################################################################
# list_all <- lapply(tab_names, function(x) read_excel(path = xl_data, sheet = x))
# # df <- data.frame(matrix(unlist(list_all), nrow=5, byrow=T),stringsAsFactors=FALSE)
# df1 <- do.call(rbind.data.frame, list_all)
# df1$people <- excel_sheets(xl_data)
# list_all <- lapply(list_all, function(x) x[-1,-1])
# pre <- function(student) list_all[[student]]
# pre(1)
mysheets_fromexcel <- list()
mysheetlist <- excel_sheets(path="Labor.xlsx")
i=1
for (i in 1:length(mysheetlist)){
tempdf <- read_excel(path="Labor.xlsx", sheet = mysheetlist[i])
tempdf$sheetname <- mysheetlist[i]
mysheets_fromexcel[[i]] <- tempdf
}
df1 <- do.call(rbind.data.frame, mysheets_fromexcel)
View(df1)
####################################################################################################
df1$Shift <- as.numeric(df1$Shift)
df1 <- do.call(rbind.data.frame, mysheets_fromexcel)
####################################################################################################
df1$Shift <- as.numeric(as.character(df1$Shift))
View(df1)
df1 <- do.call(rbind.data.frame, mysheets_fromexcel)
####################################################################################################
df1$Shift <- as.numeric(as.factor(df1$Shift))
View(df1)
df1$sheetname <- as.numeric(as.factor(df1$sheetname))
View(df1)
shifft <- length(unique(df1$Shift))
labor <- length(unique(df1$sheetname))
day1 <- ncol(df1[2:8])
score <- function(lab, shi, day) {
out <- df1[df1$sheetname==lab & df1$Shift==shi,][day]
print(as.integer(out))
}
score(2,2,2)
#   as.integer(if (length(p) == 0) {
#     -100000
#   } else {
#     p
#   })
# }
#
# # weightt(1,1)
#initialize readin listing
###################################################################################
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
model <- MIPModel() %>%
# 1 iff labor i is assigned to shift j in k day
add_variable(x[i, j, k], i = 1: labor, j = 1:shifft, k = 1:day1, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(score(i, j, k) * x[i, j, k], i = 1:labor, j =1:shifft, k = 1:day1)) %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j, k], j =1:shifft, k = 1:day1) == 1, i = 1:labor)  %>%
add_constraint(sum_expr(x[i,j,k], i = 1:labor, k = 1:day1) <= 1, j = 1:shifft)
###########################################################################################33
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
objective_value(result)
model <- MIPModel() %>%
# 1 iff labor i is assigned to shift j in k day
add_variable(x[i, j, k], i = 1: labor, j = 1:shifft, k = 1:day1, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(score(i, j, k) * x[i, j, k], i = 1:labor, j =1:shifft, k = 1:day1)) %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j, k], j =1:shifft, k = 1:day1) == 1, i = 1:labor)  %>%
add_constraint(sum_expr(x[i,j,k], i = 1:labor, k = 1:day1) <= 5, j = 1:shifft)
# add_constraint(sum_expr(x[i], j =shifft) <= 2, i = labor)
#
# each student needs to be assigned to one course
# add_constraint(sum_expr(x[i, j], j = 1:m) == 1, i = 1:n)
model
###########################################################################################33
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
matching <- result %>%
get_solution(x[i,j,k])
View(matching)
model <- MIPModel() %>%
# 1 iff labor i is assigned to shift j in k day
add_variable(x[i, j, k], i = 1: labor, j = 1:shifft, k = 1:day1, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(score(i, j, k) * x[i, j, k], i = 1:labor, j =1:shifft, k = 1:day1)) %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j, k], j =1:shifft, k = 1:day1) == 1, i = 1:labor)  %>%
add_constraint(sum_expr(x[i,j,k], i = 1:labor, k = 1:day1) <= 1, j = 1:shifft)
# add_constraint(sum_expr(x[i], j =shifft) <= 2, i = labor)
#
# each student needs to be assigned to one course
# add_constraint(sum_expr(x[i, j], j = 1:m) == 1, i = 1:n)
model
###########################################################################################33
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
matching <- result %>%
get_solution(x[i,j,k])
matching <- result %>%
get_solution(x[i,j,k]) %>%
filter(value > .9) %>%
select(i, j, k)
View(matching)
model <- MIPModel() %>%
# 1 iff labor i is assigned to shift j in k day
add_variable(x[i, j, k], i = 1: labor, j = 1:shifft, k = 1:day1, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(score(i, j, k) * x[i, j, k], i = 1:labor, j =1:shifft, k = 1:day1)) %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j, k], j =1:shifft, k = 1:day1) == 1, i = 1:labor)  %>%
add_constraint(sum_expr(x[i,j,k], i = 1:labor, k = 1:day1) <= 1, j = 1:shifft) %>%
add_constraint(sum_expr(x[i,j,k], i = 1:labor, j = 1:shifft) <= 1, k = 1:day1)
# add_constraint(sum_expr(x[i], j =shifft) <= 2, i = labor)
#
# each student needs to be assigned to one course
# add_constraint(sum_expr(x[i, j], j = 1:m) == 1, i = 1:n)
model
###########################################################################################33
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
matching <- result %>%
get_solution(x[i,j,k]) %>%
filter(value > .9) %>%
select(i, j, k)
View(matching)
View(df1)
runApp('Labor 2')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp('~/KPMG/Dashboard/Labor/Quarantine')
