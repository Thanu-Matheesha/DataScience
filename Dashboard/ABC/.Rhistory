filter(value > .9) %>%
select(i, j) %>%
rowwise() %>%
mutate(weight = weight(as.numeric(i), as.numeric(j)),
preferences = paste0(preferences(as.numeric(i)), collapse = ",")) %>% ungroup
View(matching)
head(matching)
runApp('C:/KPMG_1/MOIC/moic')
runApp('KPMG/Dashboard/Labor')
my_var <- 5
data <-6
my_var+data
new_var<- my_var+data
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
porker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
porker_vector
days_vector
names(porker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(porker_vector)<-c days_vector
names(porker_vector)<-days_vector
porker_vector
names(roulette_vector)<-days_vector
roulette_vector
porker_vector
Total_vector<-porker_vector+roulette_vector
Total_vector
Total_porker<-sum(porker_vector)
Total_porker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_porker+Total_roulette
Total_week
Total_week<-Total_porker+Total_roulette
Total_week
Total_porker<Total_roulette
days_vector[2]
poker_wednesday <- days_vector[3]
poker_wednesday
porker_vector
poker_wednesday <- poker_vector[3]
poker_wednesday <- porker_vector[3]
poker_wednesday
poker_midweek<- poker_vector[c(2,3,4)]
poker_midweek<-poker_vector[c(2,3,4)]
poker_vector<-c(140,-50,20,-120,240)
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[1:4]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-pokervector>0
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
porker_vector[selection_vector]
poker_vector<-c(140,-50,20,-120,240)
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
porker_vector[selection_vector]
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
selection_vector<-poker_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
roulette_vector[selection_vector]
selection_vector1<-roulette_vector >0
selection_vector1
roulette_vector[selection_vector1]
matrix1<-matrix(1:9,byrow = TRUE,nrow = 3)
matrix1
shiny::runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
library(magrittr) # for %>% operator
# strategy argument must be one of "always_switch" or "never_switch"
play_monty <- function(ndoors = 3, strategy = "always_switch") {
if(ndoors < 3) stop("number of doors must be at least 3")
doors <- paste0("door_", 1:ndoors)
prize_door <- sample(doors, 1)
player_first_choice <- sample(doors, 1)
host_opens_doors <- setdiff(doors, c(prize_door, player_first_choice)) %>%
sample(ndoors - 2)
player_final_choice <- switch(strategy,
"always_switch" = setdiff(doors, c(player_first_choice, host_opens_doors)),
"never_switch" = player_first_choice
)
ifelse(player_final_choice == prize_door, "Won", "Lost")
}
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
shiny::runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
install.packages("shinyalert")
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
runApp('KPMG/Dashboard/CVR')
View(doorUI)
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
runApp('KPMG/Dashboard/Labor/Quarantine')
version
shiny::runApp('KPMG/Dashboard/TSP/New folder/V1')
shiny::runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
shiny::runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
shiny::runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
shiny::runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
runApp('KPMG/Dashboard/TSP/New folder/V1')
shiny::runApp('KPMG/Dashboard/TSP/New folder/V1')
set.seed(123)
set.seed(123)
install.packages("rpart")
# load the package
library(rpart)
# load data
data(longley)
# load data
longley <- data(longley)
# load data
data(longley)
longley
# load data
longley <- as.data.frame(data(longley))
View(longley)
# load data
data(longley)
# fit model
fit <- rpart(Employed~., data=longley, control=rpart.control(minsplit=5))
View(fit)
View(longley)
# summarize the fit
summary(fit)
printcp(fit)
plotcp(fit)
plot(fit, uniform=TRUE,
main="Classification Tree for Kyphosis")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("caret")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# load the package
library(tidyverse)
source('~/.active-rstudio-document', echo=TRUE)
library(rpart)
library(caret)
model <- rpart(Species ~., data = iris)
par(xpd = NA) # otherwise on some devices the text is clipped
plot(model)
text(model, digits = 3)
# load the package
library(tidyverse)
install.packages("rlang")
# load the package
library(tidyverse)
install.packages("tibble")
# load the package
library(tidyverse)
install.packages("tidyverse")
# load the package
library(tidyverse)
library(caret)
library(rpart)
install.packages("ggplot2")
# load the package
library(tidyverse)
library(caret)
library(rpart)
install.packages("caret")
# load the package
# library(tidyverse)
library(caret)
library(dplyr)
library(dplyr)
library("caret", lib.loc="~/R/R-3.5.2/library")
detach("package:caret", unload=TRUE)
remove.packages("caret", lib="~/R/R-3.5.2/library")
library(dplyr)
library(rpart)
library(dplyr)
install.packages("tidyverse")
library(dplyr)
# load the package
library(tidyverse)
print(model, digits = 2)
# Load the data
data("Boston", package = "MASS")
# Inspect the data
sample_n(Boston, 3)
training.samples <- Boston$medv %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- Boston[training.samples, ]
# load the package
library(tidyverse)
library(rpart)
library(dplyr)
training.samples <- Boston$medv %>%
createDataPartition(p = 0.8, list = FALSE)
require(titanic)
install.packages("titanic")
require(titanic)
require(caret)
install.packages("caret")
require(caret)
require(catboost)
tt <- titanic::titanic_train[complete.cases(titanic::titanic_train),]
data <- as.data.frame(as.matrix(tt), stringsAsFactors = TRUE)
drop_columns = c("PassengerId", "Survived", "Name", "Ticket", "Cabin")
x <- data[,!(names(data) %in% drop_columns)]y <- data[,c("Survived")]
x <- data[,!(names(data) %in% drop_columns)]
y <- data[,c("Survived")]
fit_control <- trainControl(method = "cv", number = 4,classProbs = TRUE)
grid <- expand.grid(depth = c(4, 6, 8),learning_rate = 0.1,iterations = 100, l2_leaf_reg = 1e-3,            rsm = 0.95, border_count = 64)
report <- train(x, as.factor(make.names(y)),method = catboost.caret,verbose = TRUE, preProc = NULL,tuneGrid = grid, trControl = fit_control)
report <- train(x, as.factor(make.names(y)),verbose = TRUE, preProc = NULL,tuneGrid = grid, trControl = fit_control)
report <- train(x, as.factor(make.names(y)),verbose = TRUE, preProc = NULL,tuneGrid = grid, trControl = fit_control)
install.packages("gbm")
library(gbm)
report <- train(x, as.factor(make.names(y)),method = 'gbm',verbose = TRUE, preProc = NULL,tuneGrid = grid, trControl = fit_control)
y <- data[,c("Survived")]
View(x)
y
View(fit_control)
# attach the iris dataset to the environment
data(iris)
# rename the dataset
dataset <- iris
# create a list of 80% of the rows in the original dataset we can use for training
validation_index <- createDataPartition(dataset$Species, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
# summarize the class distribution
percentage <- prop.table(table(dataset$Species)) * 100
cbind(freq=table(dataset$Species), percentage=percentage)
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# a) linear algorithms
set.seed(7)
fit.lda <- train(Species~., data=dataset, method="lda", metric=metric, trControl=control)
source('~/.active-rstudio-document', echo=TRUE)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.lda, validation)
confusionMatrix(predictions, validation$Species)
confusionMatrix(predictions, validation$Species)
# estimate skill of LDA on the validation dataset
predictions <- predict(fit.lda, validation)
predictions
shiny::runApp('KPMG/Dashboard/TSP/New folder/V1')
shiny::runApp('KPMG/Dashboard/TSP/New folder/V1')
shiny::runApp('KPMG/Dashboard/ABC2')
setwd("~/KPMG/Dashboard/ABC")
library(ABCanalysis)
ddff <- read.csv("Sales.csv")
df2 <- setNames(aggregate(ddff$Value,by=list(ddff$Item.Code),FUN=sum),c("Item_Code", "value"))
df2_ABC <- ABCanalysis(df2$value, PlotIt = T)
df2_ABC_check <- ABCanalysis(df2$value)
df2_ABC2 <- ABCanalysisPlot(df2$value)
View(df2_ABC2)
df2_ABC2[["ABC"]]
df2_ABC3 <- ABCplot(df2$value)
View(df2_ABC3)
shiny::runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
?renderPlot
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
runApp('~/KPMG/Dashboard/ABC2')
