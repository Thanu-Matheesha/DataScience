my_var+data
new_var<- my_var+data
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
porker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
porker_vector
days_vector
names(porker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(porker_vector)<-c days_vector
names(porker_vector)<-days_vector
porker_vector
names(roulette_vector)<-days_vector
roulette_vector
porker_vector
Total_vector<-porker_vector+roulette_vector
Total_vector
Total_porker<-sum(porker_vector)
Total_porker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_porker+Total_roulette
Total_week
Total_week<-Total_porker+Total_roulette
Total_week
Total_porker<Total_roulette
days_vector[2]
poker_wednesday <- days_vector[3]
poker_wednesday
porker_vector
poker_wednesday <- poker_vector[3]
poker_wednesday <- porker_vector[3]
poker_wednesday
poker_midweek<- poker_vector[c(2,3,4)]
poker_midweek<-poker_vector[c(2,3,4)]
poker_vector<-c(140,-50,20,-120,240)
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[1:4]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-pokervector>0
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
porker_vector[selection_vector]
poker_vector<-c(140,-50,20,-120,240)
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
porker_vector[selection_vector]
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
my_numeric<-42
my_character<-"universe"
class(my_numeric)
class(my_character)
class(my_var)
my_vector<-c(1,2,3,4,5)
class(my_vector)
poker_vector<-c(140,-50,20,-120,240)
roulette_vector<-c(-24,-50,100,-350,10)
days_vector<-c("Monday","Tuesday","wednesday","Thursday","Friday")
names(poker_vector)<-c("Monday","Tuesday","Wedesday","Thursday", "Friday")
names(poker_vector)<-days_vector
poker_vector
names(roulette_vector)<-days_vector
roulette_vector
Total_vector<-poker_vector+roulette_vector
Total_vector
Total_poker<-sum(poker_vector)
Total_poker
Total_roulette<-sum(roulette_vector)
Total_roulette
Total_week<-Total_poker+Total_roulette
Total_week
Total_poker<Total_roulette
days_vector[2]
poker_wednesday <- poker_vector[3]
poker_wednesday
poker_midweek<-poker_vector[c(2,3,4)]
poker_midweek
poker_midweek<-poker_vector[2:4]
poker_midweek
mean(poker_midweek)
mean<-mean(poker_midweek)
mean
selection_vector<-poker_vector>0
selection_vector
selection_vector<-roulette_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
selection_vector<-poker_vector>0
selection_vector
class(selection_vector)
poker_vector[selection_vector]
roulette_vector[selection_vector]
selection_vector1<-roulette_vector >0
selection_vector1
roulette_vector[selection_vector1]
matrix1<-matrix(1:9,byrow = TRUE,nrow = 3)
matrix1
shiny::runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor/Labor 2')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor/Labor 2')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
runApp('KPMG/Dashboard/Labor')
shiny::runApp('KPMG/Dashboard/Labor')
setwd("~/KPMG/Monthly Analytics")
library(readxl)
library(lubridate)
library(reshape)
library(reshape2)
dt1 <- read_xlsx("Online Retail.xlsx")
# dt1$InvoiceDate <- as.Date(dt1$InvoiceDate)
mlt1 = melt(dt1,id.vars =  names(dt1)[c(1,3:8)])
dt2 <- dcast(mlt1, CustomerID  ~ value, value.var = c("CustomerID"),fun.aggregate =length)
View(dt1)
View(dt2)
View(mlt1)
View(dt2)
#Remove first variable containing the CustomerID
dt3 <- dt2[, -1]
#Transform dataset
for (i in 1:ncol(dt3)){
dt3[,i] <- ifelse(dt3[,i]==0,0,1)
}
#Apply PCA
for (i in 1:ncol(dt3)){
dt3[, i] <- as.numeric(dt3[, i])
}
pcaout <- prcomp(dt3)
pcdt <- pcaout$x[,1:6]
View(pcdt)
#Clustering Function
kmcl <- function(data, kmin, kmax, rnd = 1357){
library(clusterCrit)
DB <- c()
for (i in 1:ncol(data))
{
data[, i] <- as.numeric(data[, i])
}
for (j in kmin:kmax)
{
set.seed(rnd)
km <- kmeans(data, centers = j)
data1 <- as.matrix(data)
# Computing the Davies-Bouldin
DB[j] <- intCriteria(data1, km$cluster, crit = c("Davies_Bouldin"))
#print(paste0("K is equal to= ",j))
}
return(DB)
}
#Davies-Bouldin Plot
dbplot <- function(obj, tit1 = "Null"){
plot(2:15, unlist(obj), type = "o", col = "black", ylim = c(0, 3),
lwd = 2, ylab = "DB Vlaue", xlab = "Number of Clusters", cex.lab = 1.5,
cex.axis = 0.75)
grid(nx = 25, ny = 25, col = "lightgray", lty = "dotted", lwd = par("lwd"),
equilogs = TRUE)
axis(side = 1, at = seq(2, 15, by = 1), cex.axis = 0.75)
box(col = "black", lwd = 2)
title(tit1)
}
#Apply clustering for different K
clusdb <- kmcl(pcdt,2,15,rnd = 1336)
install.packages("clusterCrit")
#Clustering Function
kmcl <- function(data, kmin, kmax, rnd = 1357){
library(clusterCrit)
DB <- c()
for (i in 1:ncol(data))
{
data[, i] <- as.numeric(data[, i])
}
for (j in kmin:kmax)
{
set.seed(rnd)
km <- kmeans(data, centers = j)
data1 <- as.matrix(data)
# Computing the Davies-Bouldin
DB[j] <- intCriteria(data1, km$cluster, crit = c("Davies_Bouldin"))
#print(paste0("K is equal to= ",j))
}
return(DB)
}
#Davies-Bouldin Plot
dbplot <- function(obj, tit1 = "Null"){
plot(2:15, unlist(obj), type = "o", col = "black", ylim = c(0, 3),
lwd = 2, ylab = "DB Vlaue", xlab = "Number of Clusters", cex.lab = 1.5,
cex.axis = 0.75)
grid(nx = 25, ny = 25, col = "lightgray", lty = "dotted", lwd = par("lwd"),
equilogs = TRUE)
axis(side = 1, at = seq(2, 15, by = 1), cex.axis = 0.75)
box(col = "black", lwd = 2)
title(tit1)
}
#Apply clustering for different K
clusdb <- kmcl(pcdt,2,15,rnd = 1336)
#Apply DB plot
dbplot(clusdb,"Davies Bouldin for Clustering")
#Apply K-means with 6 clusters
set.seed(1336)
km1 <- kmeans(pcdt,centers = 8)
table(km1$cluster)
#Adding cluster
rec.inv <- cbind(dt2, km1$cluster)[, c(1, length(dt2)+1)]
names(rec.inv) <- c("CustomerID", "invCluster")
#Merging with rest of variables
dt3 <- unique(dt1[,c(4,5)])
View(rec.inv)
View(dt1)
View(pcdt)
View(dt3)
#Clustering Function
kmcl <- function(data, kmin, kmax, rnd = 1357){
library(clusterCrit)
DB <- c()
for (i in 1:ncol(data))
{
data[, i] <- as.numeric(data[, i])
}
for (j in kmin:kmax)
{
set.seed(rnd)
km <- kmeans(data, centers = j)
data1 <- as.matrix(data)
# Computing the Davies-Bouldin
DB[j] <- intCriteria(data1, km$cluster, crit = c("Davies_Bouldin"))
print(paste0("K is equal to= ",j))
}
return(DB)
}
#Davies-Bouldin Plot
dbplot <- function(obj, tit1 = "Null"){
plot(2:15, unlist(obj), type = "o", col = "black", ylim = c(0, 3),
lwd = 2, ylab = "DB Vlaue", xlab = "Number of Clusters", cex.lab = 1.5,
cex.axis = 0.75)
grid(nx = 25, ny = 25, col = "lightgray", lty = "dotted", lwd = par("lwd"),
equilogs = TRUE)
axis(side = 1, at = seq(2, 15, by = 1), cex.axis = 0.75)
box(col = "black", lwd = 2)
title(tit1)
}
#Apply clustering for different K
clusdb <- kmcl(pcdt,2,15,rnd = 1336)
#Apply DB plot
dbplot(clusdb,"Davies Bouldin for Clustering")
#Apply K-means with 6 clusters
set.seed(1336)
km1 <- kmeans(pcdt,centers = 15)
View(km1)
table(km1$cluster)
#Adding cluster
rec.inv <- cbind(dt2, km1$cluster)[, c(1, length(dt2)+1)]
names(rec.inv) <- c("CustomerID", "invCluster")
km1 <- kmeans(pcdt,centers = 8)
table(km1$cluster)
#Adding cluster
rec.inv <- cbind(dt2, km1$cluster)[, c(1, length(dt2)+1)]
names(rec.inv) <- c("CustomerID", "invCluster")
View(rec.inv)
shiny::runApp('~/KPMG/Dashboard/Labor/Quarantine')
runApp('~/KPMG/Dashboard/Labor/Quarantine')
runApp('~/KPMG/Dashboard/Labor/Quarantine')
runApp('~/KPMG/Dashboard/Labor/Quarantine')
shiny::runApp()
setwd("~/KPMG/Dashboard/Labor")
library(plotly)
library(dplyr)
library(DT)
library(readxl)
library(reshape2)
library(tidyr)
mysheets_fromexcel <- list()
mysheetlist <- excel_sheets(path="Labor.xlsx")
i=1
for (i in 1:length(mysheetlist)){
tempdf <- read_excel(path="Labor.xlsx", sheet = mysheetlist[i])
tempdf$sheetname <- mysheetlist[i]
mysheets_fromexcel[[i]] <- tempdf
}
df1 <- do.call(rbind.data.frame, mysheets_fromexcel)
runApp('Quarantine')
runApp('Quarantine')
runApp('Quarantine')
mysheets_fromexcel <- list()
mysheetlist <- excel_sheets(path="Labor.xlsx")
i=1
for (i in 1:length(mysheetlist)){
tempdf <- read_excel(path="Labor.xlsx", sheet = mysheetlist[i])
tempdf$sheetname <- mysheetlist[i]
mysheets_fromexcel[[i]] <- tempdf
}
df1 <- do.call(rbind.data.frame, mysheets_fromexcel)
runApp('Quarantine')
runApp()
runApp('Quarantine')
runApp('Quarantine')
runApp('Quarantine')
runApp('Quarantine')
runApp('Quarantine')
runApp('Quarantine')
setwd("~/KPMG/Dashboard/Labor")
library(plotly)
library(dplyr)
library(DT)
library(readxl)
library(reshape2)
library(tidyr)
mysheets_fromexcel <- list()
runApp('Quarantine')
mysheetlist <- excel_sheets(path="Labor.xlsx")
i=1
for (i in 1:length(mysheetlist)){
tempdf <- read_excel(path="Labor.xlsx", sheet = mysheetlist[i])
tempdf$sheetname <- mysheetlist[i]
mysheets_fromexcel[[i]] <- tempdf
}
runApp('Quarantine')
runApp('Quarantine')
?sample
sample
?sam
?sample
?setdiff
library(magrittr) # for %>% operator
# strategy argument must be one of "always_switch" or "never_switch"
play_monty <- function(ndoors = 3, strategy = "always_switch") {
if(ndoors < 3) stop("number of doors must be at least 3")
doors <- paste0("door_", 1:ndoors)
prize_door <- sample(doors, 1)
player_first_choice <- sample(doors, 1)
host_opens_doors <- setdiff(doors, c(prize_door, player_first_choice)) %>%
sample(ndoors - 2)
player_final_choice <- switch(strategy,
"always_switch" = setdiff(doors, c(player_first_choice, host_opens_doors)),
"never_switch" = player_first_choice
)
ifelse(player_final_choice == prize_door, "Won", "Lost")
}
set.seed(123) # for reproducible results
?set.seed
# play 1000 times with 3 doors and "always_switch" strategy
replicate(100, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(100, play_monty(ndoors = 3, "never_switch")) %>%
table() %>%
prop.table()
# play 1000 times with 3 doors and "always_switch" strategy
replicate(1, play_monty(ndoors = 3, "never_switch")) %>%
table() %>%
prop.table()
runApp('~/KPMG/Dashboard')
setwd("~/KPMG/Dashboard/CVR")
runApp()
runApp()
runApp()
?setdiff
?sample
?switch (,
case = action
)
?switch (,
case = action
)
library(magrittr) # for %>% operator
# strategy argument must be one of "always_switch" or "never_switch"
play_monty <- function(ndoors = 3, strategy = "always_switch") {
if(ndoors < 3) stop("number of doors must be at least 3")
doors <- paste0("door_", 1:ndoors)
prize_door <- sample(doors, 1)
player_first_choice <- sample(doors, 1)
host_opens_doors <- setdiff(doors, c(prize_door, player_first_choice)) %>%
sample(ndoors - 2)
player_final_choice <- switch(strategy,
"always_switch" = setdiff(doors, c(player_first_choice, host_opens_doors)),
"never_switch" = player_first_choice
)
ifelse(player_final_choice == prize_door, "Won", "Lost")
}
set.seed(123) # for reproducible results
# play 1000 times with 3 doors and "always_switch" strategy
replicate(10000, play_monty(ndoors = 3, "always_switch")) %>%
table() %>%
prop.table()
